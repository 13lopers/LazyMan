package lazyman;

import Util.Props;
import java.awt.FileDialog;
import java.nio.file.Paths;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.KeyStroke;

public class Options extends javax.swing.JDialog {

    private Map<String, String> nhl;
    private String fcb;

    public Options(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        nhl = new java.util.TreeMap();
        setNHLMap();
        
            fcb = Props.getPreferFrench();
            String team = Props.getNHLTeam();
            if (!team.equals("")) {
                for (Map.Entry<String, String> e : nhl.entrySet()) {
                    if (team.equals(e.getValue())) {
                        team = (String) e.getKey();
                        break;
                    }
                }
                NHLCB.setSelectedItem(team);
            }

            if (Props.getPreferFrench().equals("1")) {
                frenchCheckBox.setSelected(true);
            }

            if (!Props.getNHLTeam().equals("") || !Props.getPreferFrench().equals("")) {
                applyBtn.setEnabled(false);
            }

            saveStreamLocTB.setText(Props.getSaveStreamLoc());
            saveStreamLocTB.setCaretPosition(0);

            if (!Props.getStreamLinkArgs().equals("")) {
                slArgTB.setText(Props.getStreamLinkArgs());
            } 
            slArgTB.setCaretPosition(0);
            slArgTB.getInputMap().put(KeyStroke.getKeyStroke("ENTER"),"doNothing");
            
            if (!Props.getMediaPlayerrArgs().equals("") && !Props.getVlcloc().equals("")) {
                mpArgTB.setText(Props.getMediaPlayerrArgs());
            }
            else if (Props.getVlcloc().equals("")) {
                 mpArgTB.setEditable(false);
                mpArgTB.setText("Please set your media player location.");
            } 
            mpArgTB.setCaretPosition(0);
            mpArgTB.getInputMap().put(KeyStroke.getKeyStroke("ENTER"),"doNothing");
            
            refreshSpinner.setValue(Props.getRefreshRate());
            
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        NHLCB = new javax.swing.JComboBox<>();
        frenchCheckBox = new javax.swing.JCheckBox();
        applyBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        saveStreamLocTB = new javax.swing.JTextField();
        setSaveBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        slArgTB = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mpArgTB = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        refreshSpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Choose your favorite NHL team:");

        NHLCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Anaheim Ducks", "Arizona Coyotes", "Boston Bruins", "Buffalo Sabres", "Calgary Flames", "Carolina Hurricanes", "Chicago Blackhawks", "Colorado Avalanche", "Columbus Blue Jackets", "Dallas Stars", "Detroit Red Wings", "Edmonton Oilers", "Florida Panthers", "Los Angeles Kings", "Minnesota Wild", "Montreal Canadiens", "Nashville Predators", "New Jersey Devils", "New York Islanders", "New York Rangers", "Ottawa Senators", "Philadelphia Flyers", "Pittsburgh Penguins", "San Jose Sharks", "St. Louis Blues", "Tampa Bay Lightning", "Toronto Maple Leafs", "Vancouver Canucks", "Vegas Golden Knights", "Washington Capitals", "Winnipeg Jets" }));
        NHLCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NHLCBActionPerformed(evt);
            }
        });

        frenchCheckBox.setText("Prefer French feeds");
        frenchCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frenchCheckBoxActionPerformed(evt);
            }
        });

        applyBtn.setText("Apply");
        applyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyBtnActionPerformed(evt);
            }
        });

        closeBtn.setText("Close");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Location to save streams:");

        saveStreamLocTB.setEditable(false);
        saveStreamLocTB.setBackground(new java.awt.Color(255, 255, 255));
        saveStreamLocTB.setText("jTextField1");
        saveStreamLocTB.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        saveStreamLocTB.setEnabled(false);

        setSaveBtn.setText("...");
        setSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSaveBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Streamlink Arguments:");

        slArgTB.setColumns(20);
        slArgTB.setLineWrap(true);
        slArgTB.setRows(5);
        slArgTB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                slArgTBKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(slArgTB);

        jLabel4.setText("Media Player Arguments:");

        mpArgTB.setColumns(20);
        mpArgTB.setLineWrap(true);
        mpArgTB.setRows(5);
        mpArgTB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mpArgTBKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(mpArgTB);

        jLabel5.setText("Refresh Time (in minutes 0 = off):");

        refreshSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        refreshSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                refreshSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refreshSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(175, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(applyBtn)
                        .addGap(28, 28, 28)
                        .addComponent(closeBtn)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(NHLCB, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(73, 73, 73))
                                    .addComponent(saveStreamLocTB))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(frenchCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NHLCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(frenchCheckBox)
                .addGap(13, 13, 13)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(setSaveBtn)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(saveStreamLocTB)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(refreshSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void applyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyBtnActionPerformed
        String team = (String) NHLCB.getSelectedItem();
        Props.setNHLTeam((String) nhl.get(team));
        if (frenchCheckBox.isSelected()) {
            Props.setPreferFrench("1");
        } else {
            Props.setPreferFrench("0");
        }
        Props.setSaveStreamLoc(saveStreamLocTB.getText());
        Props.setStreamlinkArgs(slArgTB.getText());
        Props.setMediaPlayerrArgs(mpArgTB.getText());
        Props.setRefreshRate((int) refreshSpinner.getValue());
        applyBtn.setEnabled(false);
    }//GEN-LAST:event_applyBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        dispose();
    }//GEN-LAST:event_closeBtnActionPerformed

    private void NHLCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NHLCBActionPerformed
        enableApply();
    }//GEN-LAST:event_NHLCBActionPerformed

    private void frenchCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frenchCheckBoxActionPerformed
        if (frenchCheckBox.isSelected())
            fcb = "1";
        else
            fcb = "0";
        enableApply();
    }//GEN-LAST:event_frenchCheckBoxActionPerformed

    private void setSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSaveBtnActionPerformed
        if (System.getProperty("os.name").toLowerCase().contains("mac")) {
            System.setProperty("apple.awt.fileDialogForDirectories", "true");
            
            FileDialog fd = new FileDialog(this, "Choose a folder to save streams", FileDialog.LOAD);
            fd.setDirectory(saveStreamLocTB.getText());
            
            fd.setVisible(true);
            
            String loc = Paths.get(fd.getDirectory(), fd.getFile()).toAbsolutePath().normalize().toString();
            
            if (loc != null) {
                saveStreamLocTB.setText(loc);
            }
            
            System.setProperty("apple.awt.fileDialogForDirectories", "false");
        } else {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(saveStreamLocTB.getText()));
        chooser.setDialogTitle("Choose a folder to save streams");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            saveStreamLocTB.setText(chooser.getSelectedFile().getAbsolutePath());
        }
                }
        enableApply();
                
    }//GEN-LAST:event_setSaveBtnActionPerformed

    private void slArgTBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_slArgTBKeyReleased
        enableApply();
    }//GEN-LAST:event_slArgTBKeyReleased

    private void mpArgTBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mpArgTBKeyReleased
        enableApply();
    }//GEN-LAST:event_mpArgTBKeyReleased

    private void refreshSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_refreshSpinnerStateChanged
        enableApply();
    }//GEN-LAST:event_refreshSpinnerStateChanged

    private void setNHLMap() {
        nhl.put("None", "None");
        nhl.put("Ottawa Senators", "OTT");
        nhl.put("Philadelphia Flyers", "PHI");
        nhl.put("New York Rangers", "NYR");
        nhl.put("Washington Capitals", "WSH");
        nhl.put("Calgary Flames", "CGY");
        nhl.put("Winnipeg Jets", "WPG");
        nhl.put("San Jose Sharks", "SJS");
        nhl.put("Los Angeles Kings", "LAK");
        nhl.put("Minnesota Wild", "MIN");
        nhl.put("St Louis Blues", "STL");
        nhl.put("Pittsburgh Penguins", "PIT");
        nhl.put("Buffalo Sabres", "BUF");
        nhl.put("Montreal Canadiens", "MTL");
        nhl.put("Toronto Maple Leafs", "TOR");
        nhl.put("New Jersey Devils", "NJD");
        nhl.put("Florida Panthers", "FLA");
        nhl.put("Columbus Blue Jackets", "CBJ");
        nhl.put("New York Islanders", "NYI");
        nhl.put("Detroit Red Wings", "DET");
        nhl.put("Carolina Hurricanes", "CAR");
        nhl.put("Boston Bruins", "BOS");
        nhl.put("Tampa Bay Lightning", "TBL");
        nhl.put("Nashville Predators", "NSH");
        nhl.put("Dallas Stars", "DAL");
        nhl.put("Chicago Blackhawks", "CHI");
        nhl.put("Colorado Avalanche", "COL");
        nhl.put("Anaheim Ducks", "ANA");
        nhl.put("Arizona Coyotes", "ARI");
        nhl.put("Edmonton Oilers", "EDM");
        nhl.put("Vancouver Canucks", "VAN");
        nhl.put("Vegas Golden Knights", "VGK");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> NHLCB;
    private javax.swing.JButton applyBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JCheckBox frenchCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea mpArgTB;
    private javax.swing.JSpinner refreshSpinner;
    private javax.swing.JTextField saveStreamLocTB;
    private javax.swing.JButton setSaveBtn;
    private javax.swing.JTextArea slArgTB;
    // End of variables declaration//GEN-END:variables

    private void enableApply() {
        boolean enable;
        enable = !Props.getNHLTeam().equals(nhl.get(NHLCB.getSelectedItem())) ||
                !Props.getPreferFrench().equals(fcb) ||
                !Props.getSaveStreamLoc().equals(saveStreamLocTB.getText()) ||
                !Props.getStreamLinkArgs().equals(slArgTB.getText()) ||
                !Props.getMediaPlayerrArgs().equals(mpArgTB.getText()) ||
                Props.getRefreshRate() != (int) refreshSpinner.getValue();
        applyBtn.setEnabled(enable);
    }
}
