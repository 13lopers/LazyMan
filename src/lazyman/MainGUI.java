package lazyman;

import GameObj.Game;
import GameObj.GameWatchInfo;
import Objects.Streamlink;
import Objects.Time;
import Objects.Web;
import Util.CenterTextCellRenderer;
import Util.Console.FullConsole;
import Util.EditHosts;
import Util.IconTextCellRemderer;
import Util.MessageBox;
import Util.Console.MessageConsole;
import Util.OpenURL;
import Util.ProcessReader;
import Util.Props;
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.UnknownHostException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.TimerTask;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import java.util.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public final class MainGUI extends javax.swing.JFrame {

    private String date;
    private Game[] g;
    private final ArrayList<String> playbackIDs = new ArrayList<>();
    private final Streamlink streamlink;
    private final GameWatchInfo gwi;
    private boolean hostsEdited, selectedFavGm;
    private int streamlinkSwitch = 0, selectedGame, z = 0;
    private Timer timer;

    public MainGUI() {
        hostsEdited = false;
        selectedFavGm = false;
        streamlink = new Streamlink();
        initComponents();
        checkUpdate();
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            changePasswordMI.setVisible(false);
        } else if (System.getProperty("os.name").toLowerCase().contains("mac")) {
            com.apple.eawt.Application application = com.apple.eawt.Application.getApplication();
            application.addPreferencesMenuItem();
            application.setEnabledPreferencesMenu(true);
            changePasswordMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.META_MASK));
            exitMI.setVisible(false);
        }
        getVLCLoc();
        getSLLoc();
        gwi = new GameWatchInfo();
        setButtons();
        new newDay().start();
        checkHosts();
        date = Time.getPSTDate("yyyy-MM-dd");
        dateTF.setDate(Time.getPSTDate1("MMM dd, yyyy"));

        MessageConsole console = new MessageConsole(consoleTA);
        console.redirectOut();
        console.redirectErr(Color.RED, null);
    }

    private void checkHosts() {
        EditHosts eh = new EditHosts();
        if (!eh.hostsFileEdited()) {
            if (eh.isIpNotFound()) {
                return;
            }
            if (!System.getProperty("os.name").toLowerCase().contains("win") && Props.getPW().equals("")) {
                GetPasswordGUI gp = new GetPasswordGUI(this, true);
                gp.setLocationRelativeTo(this);
                gp.setVisible(true);
            }
            if (eh.isWrongIP()) {
                if (!eh.modifyHosts()) {
                    MessageBox.show("Could not update your hosts file. Please check the logs.", "Error", 2);
                } else {
                    hostsEdited = true;
                }
            } else if (!eh.editHosts()) {
                MessageBox.show("Could not edit your hosts file. Please check the logs.", "Error", 2);
            } else {
                hostsEdited = true;
            }
        } else {
            hostsEdited = true;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        consolePM = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        gameTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        dateTF = new com.toedter.calendar.JDateChooser();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        consoleTA = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        setVLCBtn = new javax.swing.JButton();
        vlcLbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        awayRdBtn = new javax.swing.JRadioButton();
        frRdBtn = new javax.swing.JRadioButton();
        homeRdBtn = new javax.swing.JRadioButton();
        threeCamRdBtn = new javax.swing.JRadioButton();
        sixCamRdBtn = new javax.swing.JRadioButton();
        ma1RdBtn = new javax.swing.JRadioButton();
        ma2RdBtn = new javax.swing.JRadioButton();
        ma3RdBtn = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        RdBtn360p = new javax.swing.JRadioButton();
        RdBtn720p = new javax.swing.JRadioButton();
        RdBtn540p = new javax.swing.JRadioButton();
        RdBtn720p60 = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        akamailRdBtn = new javax.swing.JRadioButton();
        level3RdBtn = new javax.swing.JRadioButton();
        saveStreamCB = new javax.swing.JCheckBox();
        playBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        maximizeConsoleButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        changePasswordMI = new javax.swing.JMenuItem();
        exitMI = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        preferencesMI = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        guidesMI = new javax.swing.JMenuItem();
        AboutMI = new javax.swing.JMenuItem();
        updateMI = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        ppMI = new javax.swing.JMenuItem();
        bitcoinMI = new javax.swing.JMenuItem();

        consolePM.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LazyMan");
        setIconImage(Toolkit.getDefaultToolkit().getImage(MainGUI.class.getResource("/Logos/LM.png")));
        setLocationByPlatform(true);
        setResizable(false);

        gameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Away", "Home", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gameTable.setRowHeight(26);
        gameTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        gameTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gameTableMouseClicked(evt);
            }
        });
        gameTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                gameTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(gameTable);
        if (gameTable.getColumnModel().getColumnCount() > 0) {
            gameTable.getColumnModel().getColumn(0).setCellRenderer(new IconTextCellRemderer());
            gameTable.getColumnModel().getColumn(1).setCellRenderer(new IconTextCellRemderer());
            gameTable.getColumnModel().getColumn(2).setCellRenderer(new CenterTextCellRenderer());
        }

        jLabel1.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jLabel1.setText("Date:");

        dateTF.setDateFormatString("MMM d, yyyy");
        dateTF.setInheritsPopupMenu(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Console"));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.setMaximumSize(new java.awt.Dimension(32, 145));

        consoleTA.setEditable(false);
        consoleTA.setBackground(new java.awt.Color(0, 0, 0));
        consoleTA.setForeground(new java.awt.Color(255, 255, 255));
        consoleTA.setDoubleBuffered(true);
        consoleTA.setMaximumSize(new java.awt.Dimension(8, 21));
        jScrollPane3.setViewportView(consoleTA);
        consoleTA.addMouseListener(new PopupListener(consolePM));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jLabel2.setText("Set Media Player Path:");

        setVLCBtn.setMnemonic(KeyEvent.VK_S);
        setVLCBtn.setText("Set");
        setVLCBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setVLCBtnMouseClicked(evt);
            }
        });
        setVLCBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setVLCBtnActionPerformed(evt);
            }
        });

        vlcLbl.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        vlcLbl.setText("Location already set.");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Feed"));

        buttonGroup1.add(awayRdBtn);
        awayRdBtn.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        awayRdBtn.setMnemonic(KeyEvent.VK_A);
        awayRdBtn.setSelected(true);
        awayRdBtn.setText("Away");
        awayRdBtn.setFocusTraversalPolicyProvider(true);

        buttonGroup1.add(frRdBtn);
        frRdBtn.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        frRdBtn.setMnemonic(KeyEvent.VK_R);
        frRdBtn.setText("French");

        buttonGroup1.add(homeRdBtn);
        homeRdBtn.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        homeRdBtn.setMnemonic(KeyEvent.VK_H);
        homeRdBtn.setText("Home");

        buttonGroup1.add(threeCamRdBtn);
        threeCamRdBtn.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        threeCamRdBtn.setMnemonic(KeyEvent.VK_3);
        threeCamRdBtn.setText("3 Cam View");

        buttonGroup1.add(sixCamRdBtn);
        sixCamRdBtn.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        sixCamRdBtn.setText("6 Cam View");

        buttonGroup1.add(ma1RdBtn);
        ma1RdBtn.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        ma1RdBtn.setText("Multi-Angle 1");

        buttonGroup1.add(ma2RdBtn);
        ma2RdBtn.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        ma2RdBtn.setText("Multi-Angle 2");

        buttonGroup1.add(ma3RdBtn);
        ma3RdBtn.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        ma3RdBtn.setText("Multi-Angle 3");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(awayRdBtn)
                    .addComponent(homeRdBtn)
                    .addComponent(frRdBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(threeCamRdBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sixCamRdBtn))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ma2RdBtn)
                    .addComponent(ma1RdBtn)
                    .addComponent(ma3RdBtn))
                .addGap(29, 29, 29))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(threeCamRdBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ma1RdBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ma2RdBtn)
                            .addComponent(sixCamRdBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ma3RdBtn)
                        .addGap(1, 1, 1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(awayRdBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(homeRdBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(frRdBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Quality"));

        buttonGroup2.add(RdBtn360p);
        RdBtn360p.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        RdBtn360p.setMnemonic(KeyEvent.VK_3);
        RdBtn360p.setText("360p");
        RdBtn360p.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RdBtn360pbitrateRdBtnActionPerformed(evt);
            }
        });

        buttonGroup2.add(RdBtn720p);
        RdBtn720p.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        RdBtn720p.setMnemonic(KeyEvent.VK_7);
        RdBtn720p.setText("720p");
        RdBtn720p.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RdBtn720pbitrateRdBtnActionPerformed(evt);
            }
        });

        buttonGroup2.add(RdBtn540p);
        RdBtn540p.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        RdBtn540p.setMnemonic(KeyEvent.VK_5);
        RdBtn540p.setText("540p");
        RdBtn540p.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RdBtn540pbitrateRdBtnActionPerformed(evt);
            }
        });

        buttonGroup2.add(RdBtn720p60);
        RdBtn720p60.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        RdBtn720p60.setMnemonic(KeyEvent.VK_6);
        RdBtn720p60.setSelected(true);
        RdBtn720p60.setText("720p 60fps");
        RdBtn720p60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RdBtn720p60bitrateRdBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(RdBtn360p)
                        .addGap(18, 18, 18)
                        .addComponent(RdBtn720p))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(RdBtn540p)
                        .addGap(18, 18, 18)
                        .addComponent(RdBtn720p60)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RdBtn360p)
                    .addComponent(RdBtn720p, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RdBtn540p, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RdBtn720p60))
                .addGap(3, 3, 3))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("CDN"));

        buttonGroup3.add(akamailRdBtn);
        akamailRdBtn.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        akamailRdBtn.setMnemonic(KeyEvent.VK_K);
        akamailRdBtn.setText("Akamai");
        akamailRdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                akamailRdBtncdnRBAP(evt);
            }
        });

        buttonGroup3.add(level3RdBtn);
        level3RdBtn.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        level3RdBtn.setMnemonic(KeyEvent.VK_L);
        level3RdBtn.setSelected(true);
        level3RdBtn.setText("Level 3");
        level3RdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level3RdBtncdnRBAP(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(akamailRdBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(level3RdBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(akamailRdBtn)
                    .addComponent(level3RdBtn)))
        );

        saveStreamCB.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        saveStreamCB.setMnemonic(KeyEvent.VK_V);
        saveStreamCB.setText("Save stream");
        saveStreamCB.setEnabled(false);
        saveStreamCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveStreamCBActionPerformed(evt);
            }
        });

        playBtn.setMnemonic(KeyEvent.VK_P);
        playBtn.setText("Play");
        playBtn.setEnabled(false);
        playBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBtnActionPerformed(evt);
            }
        });

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        maximizeConsoleButton.setIcon(new javax.swing.ImageIcon(MainGUI.class.getResource("/Icons/fullscreen.png")));
        maximizeConsoleButton.setLabel("   View bigger console");
        maximizeConsoleButton.setMaximumSize(new java.awt.Dimension(38, 38));
        maximizeConsoleButton.setMinimumSize(new java.awt.Dimension(38, 38));
        maximizeConsoleButton.setPreferredSize(new java.awt.Dimension(23, 23));
        maximizeConsoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximizeConsoleButtonActionPerformed(evt);
            }
        });

        jButton1.setText("<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(">");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jMenu1.setMnemonic(KeyEvent.VK_F);
        jMenu1.setText("File");

        changePasswordMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        changePasswordMI.setText("Change Password");
        changePasswordMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordMIActionPerformed(evt);
            }
        });
        jMenu1.add(changePasswordMI);

        exitMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMI.setText("Exit");
        exitMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMIActionPerformed(evt);
            }
        });
        jMenu1.add(exitMI);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic(KeyEvent.VK_E);
        jMenu2.setText("Edit");

        preferencesMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        preferencesMI.setText("Preferences");
        preferencesMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesMIActionPerformed(evt);
            }
        });
        jMenu2.add(preferencesMI);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Change IP");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("Clear Hosts File");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu3.setMnemonic(KeyEvent.VK_H);
        jMenu3.setText("Help");

        guidesMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        guidesMI.setText("Guides");
        guidesMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guidesMIActionPerformed(evt);
            }
        });
        jMenu3.add(guidesMI);

        AboutMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        AboutMI.setText("About");
        AboutMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMIActionPerformed(evt);
            }
        });
        jMenu3.add(AboutMI);

        updateMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        updateMI.setText("Update Available");
        updateMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMIActionPerformed(evt);
            }
        });
        jMenu3.add(updateMI);

        jMenuBar1.add(jMenu3);

        jMenu4.setMnemonic(KeyEvent.VK_D);
        jMenu4.setText("Donate");

        ppMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        ppMI.setText("PayPal");
        ppMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ppMIActionPerformed(evt);
            }
        });
        jMenu4.add(ppMI);

        bitcoinMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        bitcoinMI.setText("Bitcoin");
        bitcoinMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bitcoinMIActionPerformed(evt);
            }
        });
        jMenu4.add(bitcoinMI);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(2, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(playBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(saveStreamCB))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(refreshBtn)
                                        .addGap(132, 132, 132)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(vlcLbl))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setVLCBtn)))
                                        .addGap(35, 35, 35))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(maximizeConsoleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jSeparator2)))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setVLCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refreshBtn)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vlcLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveStreamCB)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maximizeConsoleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        dateTF.getDateEditor().addPropertyChangeListener(
            "date", new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent e) {
                    z++;
                    if (z == 2) //game liat populates twice on start without this
                    return;
                    selectedFavGm = false;
                    date = Time.formatDateSched( ((JTextField)dateTF.getDateEditor().getUiComponent()).getText() );
                    gwi.setDate(date);
                    SwingWorker<Void, Void> gg = getNHLGames(0);
                    gg.execute();
                }
            });

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMIActionPerformed

    private void gameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameTableMouseClicked
        if (gameTable.getModel().getValueAt(0, 0).equals("None")) {
            return;
        }

        selectedGame = gameTable.getSelectedRow();
        getAvailableStreams();

        if (evt != null && evt.getClickCount() == 2) {
            playBtnActionPerformed(null);
        } else {
            enablePlayBtn();
        }
    }//GEN-LAST:event_gameTableMouseClicked

    private void gameTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gameTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || KeyEvent.VK_DOWN == evt.getKeyCode()) {
            gameTableMouseClicked(null);
        }
    }//GEN-LAST:event_gameTableKeyReleased

    private void setVLCBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setVLCBtnMouseClicked
        String loc;

        if (!System.getProperty("os.name").toLowerCase().contains("win")) {
            FileDialog fd = new FileDialog(this, "Choose Media Player", FileDialog.LOAD);
            if (!Props.getVlcloc().equals("")) {
                fd.setFile(Props.getVlcloc());
            }

            fd.setVisible(true);
            loc = fd.getFile();
            if (loc != null) {
                Props.setVlcloc(Paths.get(fd.getDirectory(), fd.getFile()).toAbsolutePath().normalize().toString());
                vlcLbl.setText("Location set.");
            } else if (Props.getVlcloc().equals("")) {
                vlcLbl.setText("Location not set.");
            } else {
                vlcLbl.setText("Location not updated.");
            }
        } else {
            javax.swing.JFileChooser fileChooser = new JFileChooser();
            if (System.getProperty("os.name").toLowerCase().contains("win")) {
                fileChooser.setFileFilter(new FileNameExtensionFilter("Executable Files", "exe"));
            } else {
                fileChooser.setFileFilter(null);
            }
            if (!Props.getVlcloc().equals("")) {
                fileChooser.setCurrentDirectory(new java.io.File(Props.getVlcloc()));
            }
            int returnVal = fileChooser.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                loc = fileChooser.getSelectedFile().getPath();
                Props.setVlcloc(loc);
                vlcLbl.setText("Location set.");
            } else if (Props.getVlcloc().equals("")) {
                vlcLbl.setText("Location not set.");
            } else {
                vlcLbl.setText("Location not updated.");
            }
        }
    }//GEN-LAST:event_setVLCBtnMouseClicked

    private void setVLCBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setVLCBtnActionPerformed
        setVLCBtnMouseClicked(null);
    }//GEN-LAST:event_setVLCBtnActionPerformed

    private void RdBtn360pbitrateRdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RdBtn360pbitrateRdBtnActionPerformed
        gwi.setQuality("360p");
        Props.setBitrate("360p");
    }//GEN-LAST:event_RdBtn360pbitrateRdBtnActionPerformed

    private void RdBtn720pbitrateRdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RdBtn720pbitrateRdBtnActionPerformed
        gwi.setQuality("720p");
        Props.setBitrate("720p");
    }//GEN-LAST:event_RdBtn720pbitrateRdBtnActionPerformed

    private void RdBtn540pbitrateRdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RdBtn540pbitrateRdBtnActionPerformed
        gwi.setQuality("540p");
        Props.setBitrate("540p");
    }//GEN-LAST:event_RdBtn540pbitrateRdBtnActionPerformed

    private void RdBtn720p60bitrateRdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RdBtn720p60bitrateRdBtnActionPerformed
        gwi.setQuality("best");
        Props.setBitrate("best");
    }//GEN-LAST:event_RdBtn720p60bitrateRdBtnActionPerformed

    private void akamailRdBtncdnRBAP(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_akamailRdBtncdnRBAP
        gwi.setCdn("akc");
        Props.setCDN("Akamai");
    }//GEN-LAST:event_akamailRdBtncdnRBAP

    private void level3RdBtncdnRBAP(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level3RdBtncdnRBAP
        gwi.setCdn("l3c");
        Props.setCDN("Level 3");
    }//GEN-LAST:event_level3RdBtncdnRBAP

    private void saveStreamCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveStreamCBActionPerformed
        if (!playBtn.getText().equals("Stop Recording")) {
            if (saveStreamCB.isSelected()) {
                playBtn.setText("Record");
            } else {
                playBtn.setText("Play");
            }
        }

        streamlink.record = saveStreamCB.isSelected();
    }//GEN-LAST:event_saveStreamCBActionPerformed

    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        if (!playBtn.isEnabled()) {
            return;
        }

        checkHosts();

        if (!hostsEdited) {
            MessageBox.show("You are not completely set up! Your hosts file needs to be edited.", "Hosts file not edited", 2);
            return;
        }

        if (streamlink.getLocation() == null || streamlink.getLocation().equals("")) {
            getSLLoc();

            if (streamlink.getLocation() == null || streamlink.getLocation().equals("")) {
                MessageBox.show("Streamlink was not set! It is required to stream games.", "Streamlink not set", 2);
                return;
            }
        }

        gwi.setUrl(date, getMediaID());

        if (playBtn.getText().equals("Stop Recording")) {
            streamlinkSwitch = -1;

            if (saveStreamCB.isSelected()) {
                playBtn.setText("Record");
            } else {
                playBtn.setText("Play");
            }
            return;
        }

        if (saveStreamCB.isSelected()) {
            streamlinkSwitch = 1;
            playBtn.setText("Stop Recording");
        } else {
            streamlinkSwitch = 0;
        }
        SwingWorker<Void, Void> pl = playLive();
        pl.execute();
    }//GEN-LAST:event_playBtnActionPerformed

    private void preferencesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMIActionPerformed
        int refresh = Props.getRefreshRate();

        Options op = new Options(this, true);
        op.setLocationRelativeTo(this);
        op.setVisible(true);

        if (!gameTable.getModel().getValueAt(0, 0).equals("None")) {
            int idx = selectedGame;
            setRow(idx);
            setFeed(idx, 'a');

            if (Props.getRefreshRate() != refresh) {
                refresh = Props.getRefreshRate();

                if (refresh == 0 && timer != null) {
                    timer.cancel();
                    timer = null;
                } else if (refresh > 0 && timer != null) {
                    timer.cancel();
                    timer.scheduleAtFixedRate(new Refresh(), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                } else if (refresh > 0 && timer == null) {
                    timer = new Timer();
                    timer.scheduleAtFixedRate(new Refresh(), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                }
            }
        }
    }//GEN-LAST:event_preferencesMIActionPerformed

    private void changePasswordMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordMIActionPerformed
        GetPasswordGUI gp = new GetPasswordGUI(this, true);
        gp.setLocationRelativeTo(this);
        gp.setVisible(true);
    }//GEN-LAST:event_changePasswordMIActionPerformed

    private void AboutMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMIActionPerformed
        AboutGUI a = new AboutGUI(this, true);
        a.setLocationRelativeTo(this);
        a.setVisible(true);
    }//GEN-LAST:event_AboutMIActionPerformed

    private void guidesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guidesMIActionPerformed
        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/index");
    }//GEN-LAST:event_guidesMIActionPerformed

    private void ppMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ppMIActionPerformed
        OpenURL.open("https://www.donation-tracker.de/donate/stevensnjd4");
    }//GEN-LAST:event_ppMIActionPerformed

    private void bitcoinMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bitcoinMIActionPerformed
        OpenURL.open("https://blockchain.info/address/19V1BAifx9DBeW5igL5HLLytYfEjkzSJjD");
    }//GEN-LAST:event_bitcoinMIActionPerformed

    private void updateMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMIActionPerformed
        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/downloads");
    }//GEN-LAST:event_updateMIActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        SwingWorker<Void, Void> gg = getNHLGames(selectedGame);
        gg.execute();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void maximizeConsoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maximizeConsoleButtonActionPerformed
        FullConsole fc = new FullConsole(this, true, consoleTA);
        fc.setLocationRelativeTo(this);
        fc.setVisible(true);
    }//GEN-LAST:event_maximizeConsoleButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        selectedFavGm = false;
        date = Time.getPrevDay(date);
        dateTF.setDate(Time.getDate(date, "yyyy-MM-dd"));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        selectedFavGm = false;
        date = Time.getNextDay(date);
        dateTF.setDate(Time.getDate(date, "yyyy-MM-dd"));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        CustomIP c = new CustomIP(this, true);
        c.setLocationRelativeTo(this);
        c.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        EditHosts eh = new EditHosts();

        if (eh.clearHosts()) {
            MessageBox.show("Hosts file cleared from LazyMan edits.", "Hosts File Cleared", 0);
        } else {
            MessageBox.show("Hosts file not cleared from LazyMan edits. Please check the console area.", "Hosts Not File Cleared", 2);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMI;
    private javax.swing.JRadioButton RdBtn360p;
    private javax.swing.JRadioButton RdBtn540p;
    private javax.swing.JRadioButton RdBtn720p;
    private javax.swing.JRadioButton RdBtn720p60;
    private javax.swing.JRadioButton akamailRdBtn;
    private javax.swing.JRadioButton awayRdBtn;
    private javax.swing.JMenuItem bitcoinMI;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JMenuItem changePasswordMI;
    private javax.swing.JPopupMenu consolePM;
    private javax.swing.JTextPane consoleTA;
    private com.toedter.calendar.JDateChooser dateTF;
    private javax.swing.JMenuItem exitMI;
    private javax.swing.JRadioButton frRdBtn;
    private javax.swing.JTable gameTable;
    private javax.swing.JMenuItem guidesMI;
    private javax.swing.JRadioButton homeRdBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton level3RdBtn;
    private javax.swing.JRadioButton ma1RdBtn;
    private javax.swing.JRadioButton ma2RdBtn;
    private javax.swing.JRadioButton ma3RdBtn;
    private javax.swing.JButton maximizeConsoleButton;
    private javax.swing.JButton playBtn;
    private javax.swing.JMenuItem ppMI;
    private javax.swing.JMenuItem preferencesMI;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JCheckBox saveStreamCB;
    private javax.swing.JButton setVLCBtn;
    private javax.swing.JRadioButton sixCamRdBtn;
    private javax.swing.JRadioButton threeCamRdBtn;
    private javax.swing.JMenuItem updateMI;
    private javax.swing.JLabel vlcLbl;
    // End of variables declaration//GEN-END:variables

    class newDay extends Thread {

        @Override
        public void run() {
            while (true) {
                try {
                    Thread.sleep(Time.nextDay());
                    date = Time.getPSTDate("yyyy-MM-dd");
                    dateTF.setDate(Time.getPSTDate1("MMM dd, yyyy"));
                    gwi.setDate(date);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        }

    }

    private SwingWorker<Void, Void> getNHLGames(final int row) {

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    if (Time.isToday(date) && Props.getRefreshRate() > 0 && timer == null) {
                        timer = new Timer();
                        timer.scheduleAtFixedRate(new Refresh(), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                    } else if (timer != null && !Time.isToday(date)) {
                        timer.cancel();
                        timer = null;
                    }
                    String time;

                    DefaultTableModel model = (DefaultTableModel) gameTable.getModel();
                    model.setRowCount(0);

                    g = GetNHLInfo.getGames(date);

                    if (g != null && g.length > 0) {
                        for (Game g1 : g) {
                            if (g1.getTimeRemaining().equalsIgnoreCase("n/a")) {
                                time = Time.toLocalTZ(date + " " + g1.getTime(), "UTC", "yyyy-MM-dd H:mm");
                            } else {
                                time = g1.getTimeRemaining();
                            }
                            model.addRow(new Object[]{g1.getAwayTeam() + g1.getAwayTeamFull(),
                                g1.getHomeTeam() + g1.getHomeTeamFull(),
                                time});
                        }
                        gameTable.setModel(model);

                        if (row != -1) {
                            selectedGame = setRow(row);
                        }
                        enablePlayBtn();

                        gameTable.requestFocus();
                    } else if (g == null) {
                        model.setRowCount(0);
                        model.addRow(new Object[]{"None", "None", "None"});
                        if (timer != null) {
                            timer.cancel();
                            timer = null;
                        }
                        playBtn.setEnabled(false);
                    }

                    getAvailableStreams();

                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

                return null;

            }

        };
        return worker;
    }

    private String getFavTeamIndex(String team) {
        for (int i = 0; i < g.length; i++) {
            if ((g[i].getAwayTeam()).equals(team)) {
                if (g[i].getGameState().contains("Pre") || g[i].getGameState().contains("In Progress") || g[i].getGameState().contains("Final")) {
                    return i + "a";
                }
                return "-1n";
            }
            if (g[i].getHomeTeam().equals(team)) {
                if (g[i].getGameState().contains("Pre") || g[i].getGameState().contains("In Progress") || g[i].getGameState().contains("Final")) {
                    return i + "h";
                }
                return "-1n";
            }
        }
        return "-1n";
    }

    private int setRow(int row) {
        if ((!Props.getNHLTeam().equals("") || !Props.getNHLTeam().equals("None")) && !selectedFavGm) {
            String index = getFavTeamIndex(Props.getNHLTeam());
            int idx = Integer.parseInt(index.substring(0, index.length() - 1));
            char homeOrAway = index.charAt(index.length() - 1);
            
            if (idx != -1) {
                setFeed(idx, homeOrAway);
                gameTable.setRowSelectionInterval(idx, idx);
                selectedFavGm = true;
                return idx;
            }
        }
        setFeed(row, 'a');

        gameTable.setRowSelectionInterval(row, row);
        
        return row;
    }

    private void setFeed(int idx, char homeOrAway) {
        if (selectedFavGm) {
            return;
        }
        switch (homeOrAway) {
            case 'a':
                if (!"0".equals(Props.getPreferFrench()) && g[idx].getFrenchMediaID() != null) {
                    frRdBtn.setSelected(true);
                } else if (g[idx].getAwayMediaID() != null) {
                    awayRdBtn.setSelected(true);
                } else {
                    homeRdBtn.setSelected(true);
                }
                break;
            case 'h':
                if (!"0".equals(Props.getPreferFrench()) && g[idx].getFrenchMediaID() != null) {
                    frRdBtn.setSelected(true);
                } else {
                    homeRdBtn.setSelected(true);
                }
        }
    }

    private void getAvailableStreams() {
        if (g==null) {
            awayRdBtn.setText("Away");
            homeRdBtn.setText("Home");
            frRdBtn.setText("French");
            ma1RdBtn.setText("Multi-Angle 1");
            ma2RdBtn.setText("Multi-Angle 2");
            ma3RdBtn.setText("Multi-Angle 3");
            return;
        }
        int index = selectedGame;
        if (g[index].getAwayMediaID() == null) {
            awayRdBtn.setEnabled(false);
            homeRdBtn.setSelected(true);
            awayRdBtn.setText("Away");
        } else {
            awayRdBtn.setEnabled(true);
            if (g[index].getAwayTVStation() != null && !g[index].getAwayTVStation().isEmpty()) {
                awayRdBtn.setText("Away (" + g[index].getAwayTVStation() + ")");
            } else {
                awayRdBtn.setText("Away");
            }
        }

        if (g[index].getNationalMediaID() != null) {
            if ((g[index].getNationalTVStation() != null && !g[index].getNationalTVStation().isEmpty())) {
                homeRdBtn.setText("National (" + g[index].getNationalTVStation() + ")");
                homeRdBtn.setMnemonic(KeyEvent.VK_N);
                if (g[index].getNationalMediaID() == null) {
                    homeRdBtn.setEnabled(false);
                    if (homeRdBtn.isSelected()) {
                        if (awayRdBtn.isEnabled()) {
                            awayRdBtn.setSelected(true);
                        }
                    }
                } else {
                    homeRdBtn.setEnabled(true);
                }
            } else {
                homeRdBtn.setText("National");
                homeRdBtn.setMnemonic(KeyEvent.VK_N);
                if (g[index].getNationalMediaID() == null) {
                    homeRdBtn.setEnabled(false);
                    if (homeRdBtn.isSelected()) {
                        if (awayRdBtn.isEnabled()) {
                            awayRdBtn.setSelected(true);
                        }
                    }
                } else {
                    homeRdBtn.setEnabled(true);
                }
            }
        } else if (g[index].getHomeTVStation() != null && !g[index].getHomeTVStation().isEmpty()) {
            homeRdBtn.setText("Home (" + g[index].getHomeTVStation() + ")");
            homeRdBtn.setMnemonic(KeyEvent.VK_H);
            if (g[index].getHomeMediaID() == null) {
                homeRdBtn.setEnabled(false);
                if (homeRdBtn.isSelected()) {
                    if (awayRdBtn.isEnabled()) {
                        awayRdBtn.setSelected(true);
                    }
                }
            } else {
                homeRdBtn.setEnabled(true);
            }
        } else {
            homeRdBtn.setText("Home");
            homeRdBtn.setMnemonic(KeyEvent.VK_H);
            if (g[index].getHomeMediaID() == null) {
                homeRdBtn.setEnabled(false);
                if (awayRdBtn.isEnabled()) {
                    awayRdBtn.setSelected(true);
                }
            } else if (g != null) {
                homeRdBtn.setEnabled(true);
            } else {
                homeRdBtn.setEnabled(false);
            }
        }

        if (g[index].getFrenchMediaID() == null) {
            frRdBtn.setEnabled(false);
            frRdBtn.setText("French");
            if (awayRdBtn.isEnabled() && frRdBtn.isSelected()) {
                awayRdBtn.setSelected(true);
            } else if (frRdBtn.isSelected()) {
                homeRdBtn.setSelected(true);
            }
        } else {
            frRdBtn.setEnabled(true);
            if (g[index].getFrenchTVStation() != null && !g[index].getFrenchTVStation().isEmpty()) {
                frRdBtn.setText("French (" + g[index].getFrenchTVStation() + ")");
            } else {
                frRdBtn.setText("French");
            }
        }

        threeCamRdBtn.setEnabled(g[index].getThreeCamMID() != null);
        if (threeCamRdBtn.isSelected()) {
            if (awayRdBtn.isEnabled()) {
                awayRdBtn.setSelected(true);
            } else {
                homeRdBtn.setSelected(true);
            }
        }
        sixCamRdBtn.setEnabled(g[index].getSixCamMID() != null);
        if (sixCamRdBtn.isSelected() && g[index].getSixCamMID() == null) {
            if (awayRdBtn.isEnabled()) {
                awayRdBtn.setSelected(true);
            } else {
                homeRdBtn.setSelected(true);
            }
        }

        ma1RdBtn.setEnabled(g[index].getIsoStream(0) != null);
        if (g[index].getIsoStream(0) != null) {
            ma1RdBtn.setText(g[index].getIsoStreamNames(0));
        } else {
            if (ma1RdBtn.isSelected()) {
                if (awayRdBtn.isEnabled()) {
                    awayRdBtn.setSelected(true);
                } else {
                    homeRdBtn.setSelected(true);
                }
            }
            ma1RdBtn.setText("Multi-Angle 1");
        }

        ma2RdBtn.setEnabled(g[index].getIsoStream(1) != null);
        if (g[index].getIsoStream(1) != null) {
            ma2RdBtn.setText(g[index].getIsoStreamNames(1));
        } else {
            if (ma2RdBtn.isSelected()) {
                if (awayRdBtn.isEnabled()) {
                    awayRdBtn.setSelected(true);
                } else {
                    homeRdBtn.setSelected(true);
                }
            }
            ma2RdBtn.setText("Multi-Angle 2");
        }
        ma3RdBtn.setEnabled(g[index].getIsoStream(2) != null);
        if (g[index].getIsoStream(2) != null) {
            ma3RdBtn.setText(g[index].getIsoStreamNames(2));
        } else {
            if (ma3RdBtn.isSelected()) {
                if (awayRdBtn.isEnabled()) {
                    awayRdBtn.setSelected(true);
                } else {
                    homeRdBtn.setSelected(true);
                }
            }
            ma3RdBtn.setText("Multi-Angle 3");
        }
    }

    private boolean checkID(Game game) {
        BufferedReader br = null;
        boolean idExists = false;
        try {
            String base = "";
            try {
                base = Paths.get(Props.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toFile().getParent();
            } catch (URISyntaxException ex) {
                ex.printStackTrace();
            }
            File ids = new File(base + System.getProperty("file.separator") + "ids.txt");
            if (!ids.exists()) {
                fillIDs();
            }

            br = new BufferedReader(new FileReader(ids));
            String line;
            while ((line = br.readLine()) != null) {
                if (line.matches(game.getAwayMediaID() + "|" + game.getHomeMediaID() + "|" + game.getNationalMediaID() + "|" + game.getFrenchMediaID())) {
                    idExists = true;
                    break;
                }
            }
            if (!idExists) {
                fillIDs();

                br = new BufferedReader(new FileReader(ids));

                while ((line = br.readLine()) != null) {
                    if (line.matches(game.getAwayMediaID() + "|" + game.getHomeMediaID() + "|" + game.getFrenchMediaID())) {
                        idExists = true;
                        break;
                    }
                }
            }

        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
        return idExists;
    }

    private void fillIDs() {
        if (!playbackIDs.isEmpty()) {
            playbackIDs.clear();
        }

        String base = "";

        try {
            Collections.addAll(playbackIDs, Web.getContent("http://mf.svc.nhl.com/static/ids.txt").replace("akc", "").replace("l3c", "").split("\n"));

            base = Paths.get(Props.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toFile().getParent();
        } catch (URISyntaxException ex) {
            ex.printStackTrace();
        } catch (UnknownHostException uhe) {
            MessageBox.show("The server may be down.", "Error", 2);
        }
        try (FileWriter writer = new FileWriter(new File(base + System.getProperty("file.separator") + "ids.txt"), false)) {
            for (String str : playbackIDs) {
                writer.write(str + "\r\n");
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            playbackIDs.clear();
        }
    }

    private void enablePlayBtn() {
        if (g==null) {
            playBtn.setEnabled(false);
            return;
        }
        int idx = selectedGame;
        String d = Time.toLocalTZ(date, "America/Los_Angeles", "yyyy-MM-dd", "yyyy-MM-dd");
        
        boolean e = Time.isXMinBeforeGame(d + " " + Time.toLocalTZ(g[idx].getTime(), "UTC", "H:mm"), 50) && checkID(g[idx]);

        playBtn.setEnabled(e);

        if (!e && saveStreamCB.isSelected()) {
            saveStreamCB.setSelected(false);
            streamlink.record = false;
        }
        saveStreamCB.setEnabled(e);

        if (!playbackIDs.isEmpty()) {
            playbackIDs.clear();
        }
    }

    private SwingWorker<Void, Void> playLive() {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                try {
                    if (!Props.getVlcloc().equals("")) {
                        int idx = selectedGame;
                        Process l = streamlink.run(g[idx], gwi);
                        if (l != null) {
                            SwingWorker<Void, Void> go = getSLOutput(l);
                            go.execute();

                            System.out.print("\n-----\n");
                            System.out.println("Streamlink starting...\n");

                            while (l.isAlive()) {
                                Thread.sleep(700);

                                if (streamlinkSwitch == -1) {
                                    l.destroy();
                                }
                            }
                            l.waitFor();
                            System.out.println("Streamlink done");
                            int li = consoleTA.getText().lastIndexOf("-----");
                            if (!consoleTA.getText().substring(li, consoleTA.getText().length()).contains("Opening")) {
                                MessageBox.show("Stream unavailable. Please report the game you are trying to play.", "Error", 2);
                            }
                        } else if (playBtn.getText().equals("Stop Recording")) {
                            streamlinkSwitch = -1;

                            if (saveStreamCB.isSelected()) {
                                playBtn.setText("Record");
                            } else {
                                playBtn.setText("Play");
                            }
                        }
                    } else {
                        String message = "Please set the location to your media player executable.";
                        MessageBox.show(message, "Error", 2);
                        playBtn.setEnabled(true);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return null;

            }

        };
        return worker;
    }

    private void getVLCLoc() {
        String loc;
        java.io.File file;
        loc = Props.getVlcloc();
        if (!loc.equals("")) {
            return;
        }
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            loc = "C:\\Program Files\\VideoLAN\\VLC\\vlc.exe";
            file = new java.io.File(loc);
            if (file.exists()) {
                Props.setVlcloc(loc);
            } else {
                loc = "C:\\Program Files (x86)\\VideoLAN\\VLC\\vlc.exe";
                file = new java.io.File(loc);
                if (file.exists()) {
                    Props.setVlcloc(loc);
                } else {
                    vlcLbl.setText("Location not set.");
                }
            }
        } else if (System.getProperty("os.name").toLowerCase().contains("mac")) {
            loc = "/Applications/VLC.app/Contents/MacOS/VLC";
            file = new java.io.File(loc);
            if (file.exists()) {
                Props.setVlcloc(loc);
            } else {
                vlcLbl.setText("Location not set.");
            }
        } else {
            loc = "/usr/bin/vlc";
            file = new java.io.File(loc);
            if (file.exists()) {
                Props.setVlcloc(loc);
            } else {
                vlcLbl.setText("Location not set.");
            }
        }
    }

    private void getSLLoc() {
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            Path currentRelativePath = Paths.get("");
            String ls = currentRelativePath.toAbsolutePath().toString() + "\\streamlink\\streamlink.exe";
            java.io.File f = new java.io.File(ls);
            if (f.exists()) {
                streamlink.setLocation(ls);
            } else {
                MessageBox.show("Could not find Streamlink. Please extract the folder comtaining Streamlink to the same folder as LazyMan.", "Error", 2);
            }
        } else {
            String ls;
            if (System.getProperty("os.name").toLowerCase().contains("mac")) {
                ls = "/usr/local/bin/streamlink";
            } else {
                ls = "streamlink";
            }
            if (cmdExists(ls)) {
                streamlink.setLocation(ls);
            } else {
                MessageBox.show("Could not find Streamlink. Please follow the guide on how to install it.", "Error", 2);
            }
        }
    }

    private boolean cmdExists(String cmd) {
        String output;
        try {
            output = ProcessReader.getProcessOutput(new ProcessBuilder("/bin/sh", "-c", cmd).redirectErrorStream(true).start()).toLowerCase();
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }

        return !(output.equals("")
                || output.contains("not found")
                || output.contains("no file")
                || output.contains("no such"));
    }

    private void setButtons() {
        String bitrate = Props.getBitrate(), cdn = Props.getCDN();

        switch (bitrate) {
            case "360p":
                RdBtn360p.setSelected(true);
                gwi.setQuality(bitrate);
                break;
            case "540p":
                RdBtn540p.setSelected(true);
                gwi.setQuality(bitrate);
                break;
            case "720p":
                RdBtn720p.setSelected(true);
                gwi.setQuality(bitrate);
                break;
            case "best":
                RdBtn720p60.setSelected(true);
                gwi.setQuality(bitrate);
                break;
            default:
                gwi.setQuality("best");
                break;
        }

        switch (cdn) {
            case "Level 3":
                level3RdBtn.setSelected(true);
                gwi.setCdn("l3c");
                break;
            case "Akamai":
                akamailRdBtn.setSelected(true);
                gwi.setCdn("akc");
                break;
            default:
                gwi.setCdn("l3c");
                break;
        }
    }

    private String getMediaID() {
        int idx = selectedGame;
        if (awayRdBtn.isSelected()) {
            return g[idx].getAwayMediaID();
        } else if (frRdBtn.isSelected()) {
            return g[idx].getFrenchMediaID();
        } else if (threeCamRdBtn.isSelected()) {
            return g[idx].getThreeCamMID();
        } else if (sixCamRdBtn.isSelected()) {
            return g[idx].getSixCamMID();
        } else if (ma1RdBtn.isSelected()) {
            return g[idx].getIsoStream(0);
        } else if (ma2RdBtn.isSelected()) {
            return g[idx].getIsoStream(1);
        } else if (ma3RdBtn.isSelected()) {
            return g[idx].getIsoStream(2);
        } else {
            if (homeRdBtn.getText().contains("National")) {
                return g[idx].getNationalMediaID();
            }
            return g[idx].getHomeMediaID();
        }
    }

    private void checkUpdate() {
        try (Scanner s = new Scanner(getClass().getResourceAsStream("/VERSION.txt"))) {
            String[] ver = s.nextLine().split("\\.");
            int major = Integer.parseInt(ver[0]), minor = Integer.parseInt(ver[1]), patch = Integer.parseInt(ver[2]), build = Integer.parseInt(ver[3].replace(" BETA", ""));
            int curMajor = 0, curMinor = 0, curPatch = 0, curBuild = 0;
            try {
                String[] curVer = Web.getContent("https://bitbucket.org/ntyler92/lazyman-v2/raw/master/VERSION").split("\\.");
                curMajor = Integer.parseInt(curVer[0]);
                curMinor = Integer.parseInt(curVer[1]);
                curPatch = Integer.parseInt(curVer[2]);
                curBuild = Integer.parseInt(curVer[3]);
            } catch (Exception ex) {
                return;
            }

            if (!ver[3].contains("BETA")) {
                if (curMajor > major || (curMajor == major && curMinor > minor) || (curMajor == major && curMinor >= minor && curPatch > patch) || (curMajor == major && curMinor >= minor && curPatch >= patch && curBuild > build)) {
                    if (MessageBox.ask("New update available!\nWould you like to open the download page?", "New Update!") == MessageBox.yesOption()) {
                        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/downloads");
                        System.exit(0);
                    }
                } else {
                    updateMI.setVisible(false);
                }
            } else {
                String[] curVerB = Web.getContent("https://bitbucket.org/ntyler92/lazyman-v2/raw/master/VERSIONBETA").split("\\.");
                int curMajorB = Integer.parseInt(curVerB[0]), curMinorB = Integer.parseInt(curVerB[1]), curPatchB = Integer.parseInt(curVerB[2]), curBuildB = Integer.parseInt(curVerB[3].replace(" BETA", ""));

                if (curMajor > major || (curMajor == major && curMinor > minor) || (curMajor == major && curMinor >= minor && curPatch > patch) || (curMajor == major && curMinor >= minor && curPatch >= patch && curBuild > build)) {
                    if (MessageBox.ask("New stable update available!\nWould you like to open the download page?", "New Update!") == MessageBox.yesOption()) {
                        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/downloads");
                        System.exit(0);
                    }
                } else if (curMajorB > major || (curMajorB == major && curMinorB > minor) || (curMajorB == major && curMinorB >= minor && curPatchB > patch) || (curMajorB == major && curMinorB >= minor && curPatchB >= patch && curBuildB > build)) {
                    if (MessageBox.ask("New beta update available!\nWould you like to open the download page?", "New Update!") == MessageBox.yesOption()) {
                        OpenURL.open("https://www.reddit.com/r/LazyMan/");
                        System.exit(0);
                    }
                } else {
                    updateMI.setVisible(false);
                }
            }
        } catch (UnknownHostException uhe) {
            MessageBox.show("You are either offline or BitBucket is down to check for updates.", "Error", 2);
        }
    }

    class Refresh extends TimerTask {

        @Override
        public void run() {
            System.out.println("lazyman.MainGUI.Refresh.run()");
            SwingWorker<Void, Void> gg = getNHLGames(selectedGame);
            gg.execute();
        }
    }

    private SwingWorker<Void, Void> getSLOutput(final Process p) {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                try {
                    ProcessReader.putProcessOutput(p, consoleTA);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return null;

            }

        };
        return worker;
    }

}
