package lazyman;

import GameObj.Game;
import GameObj.GameWatchInfo;
import Objects.Streamlink;
import Objects.Time;
import Objects.Web;
import Util.CenterTextCellRenderer;
import Util.Console.FullConsole;
import Util.EditHosts;
import Util.IconTextCellRemderer;
import Util.MessageBox;
import Util.Console.MessageConsole;
import Util.OpenURL;
import Util.ProcessReader;
import Util.Props;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.UnknownHostException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.TimerTask;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import java.util.Timer;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public final class MainGUI extends javax.swing.JFrame {

    private String NHLDate, MLBDate, league;
    private Game[] nhl, mlb;
    private final ArrayList<String> NHLPlaybackIDs = new ArrayList<>(), MLBPlaybackIDs = new ArrayList<>();
    private final Streamlink streamlink;
    private final GameWatchInfo NHLGWI;
    private boolean NHLHostsEdited, MLBHostsEdited, NHLSelectedFavGm, MLBSelectedFavGm;
    private int NHLStreamlinkSwitch = 0, MLBStreamlinkSwitch = 0, NHLSelectedGame, MLBSelectedGame, z = 0;
    private Timer NHLTimer, MLBTimer;

    public MainGUI() {
        league = "NHL";
        NHLHostsEdited = false;
        MLBHostsEdited = false;
        NHLSelectedFavGm = false;
        MLBSelectedFavGm = false;
        streamlink = new Streamlink();
        initComponents();
        checkUpdate();
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            changePasswordMI.setVisible(false);
        } else if (System.getProperty("os.name").toLowerCase().contains("mac")) {
            com.apple.eawt.Application application = com.apple.eawt.Application.getApplication();
            application.addPreferencesMenuItem();
            application.setEnabledPreferencesMenu(true);
            changePasswordMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.META_MASK));
            exitMI.setVisible(false);
        }
        getSLLoc();
        NHLGWI = new GameWatchInfo();
        setButtons();
        new newDay().start();
        checkHosts("NHL");
        checkHosts("MLB");
        NHLDate = Time.getPSTDate("yyyy-MM-dd");
        NHLDateTF.setDate(Time.getPSTDate1("MMM dd, yyyy"));
        MLBDateTF.setDate(Time.getPSTDate1("MMM dd, yyyy"));
        MLBDate = Time.getPSTDate("yyyy-MM-dd");

        MessageConsole console = new MessageConsole(consoleTA);
        console.redirectOut();
        console.redirectErr(Color.RED, null);
    }

    private void checkHosts(String league) {
        EditHosts eh = new EditHosts();
        if (!eh.hostsFileEdited(league)) {
            if (eh.isIpNotFound(league)) {
                return;
            }
            if (!System.getProperty("os.name").toLowerCase().contains("win") && Props.getPW().equals("")) {
                GetPasswordGUI gp = new GetPasswordGUI(this, true);
                gp.setLocationRelativeTo(this);
                gp.setVisible(true);
            }
            if (eh.isWrongIP(league)) {
                if (eh.modifyHosts(league)) {
                    if (league.equals("NHL")) {
                        NHLHostsEdited = true;
                    } else {
                        MLBHostsEdited = true;
                    }
                }
            } else if (eh.editHosts(league)) {
                if (league.equals("NHL")) {
                    NHLHostsEdited = true;
                } else {
                    MLBHostsEdited = true;
                }
            }
        } else if (league.equals("NHL")) {
            NHLHostsEdited = true;
        } else {
            MLBHostsEdited = true;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        consolePM = new javax.swing.JPopupMenu();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        consoleTA = new javax.swing.JTextPane();
        maximizeConsoleButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        NHLPrevDayBtn = new javax.swing.JButton();
        NHLNextDayBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        NHLDateTF = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        NHLGameTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        MLBGameTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        MLBDateTF = new com.toedter.calendar.JDateChooser();
        MLBPrevDayBtn = new javax.swing.JButton();
        MLBNextDayBtn = new javax.swing.JButton();
        NHLPlayBtn = new javax.swing.JButton();
        NHLSaveStreamCB = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        NHLCDNCB = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        NHLQualityCB = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        NHLFeedCB = new javax.swing.JComboBox<>();
        NHLRefreshBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        changePasswordMI = new javax.swing.JMenuItem();
        exitMI = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        preferencesMI = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        guidesMI = new javax.swing.JMenuItem();
        AboutMI = new javax.swing.JMenuItem();
        updateMI = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        ppMI = new javax.swing.JMenuItem();
        bitcoinMI = new javax.swing.JMenuItem();

        consolePM.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LazyMan");
        setIconImage(Toolkit.getDefaultToolkit().getImage(MainGUI.class.getResource("/Logos/LM.png")));
        setLocationByPlatform(true);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Console"));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.setMaximumSize(new java.awt.Dimension(32, 145));

        consoleTA.setEditable(false);
        consoleTA.setBackground(new java.awt.Color(0, 0, 0));
        consoleTA.setForeground(new java.awt.Color(255, 255, 255));
        consoleTA.setDoubleBuffered(true);
        consoleTA.setMaximumSize(new java.awt.Dimension(8, 21));
        jScrollPane3.setViewportView(consoleTA);
        consoleTA.addMouseListener(new PopupListener(consolePM));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
        );

        maximizeConsoleButton.setIcon(new javax.swing.ImageIcon(MainGUI.class.getResource("/Icons/fullscreen.png")));
        maximizeConsoleButton.setLabel("   View bigger console");
        maximizeConsoleButton.setMaximumSize(new java.awt.Dimension(38, 38));
        maximizeConsoleButton.setMinimumSize(new java.awt.Dimension(38, 38));
        maximizeConsoleButton.setPreferredSize(new java.awt.Dimension(23, 23));
        maximizeConsoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximizeConsoleButtonActionPerformed(evt);
            }
        });

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        NHLPrevDayBtn.setText("<");
        NHLPrevDayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NHLPrevDayBtnActionPerformed(evt);
            }
        });

        NHLNextDayBtn.setText(">");
        NHLNextDayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NHLNextDayBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jLabel1.setText("Date:");

        NHLDateTF.setDateFormatString("MMM d, yyyy");
        NHLDateTF.setInheritsPopupMenu(true);

        NHLGameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Away", "Home", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        NHLGameTable.setRowHeight(26);
        NHLGameTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        NHLGameTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NHLGameTableMouseClicked(evt);
            }
        });
        NHLGameTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                NHLGameTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(NHLGameTable);
        if (NHLGameTable.getColumnModel().getColumnCount() > 0) {
            NHLGameTable.getColumnModel().getColumn(0).setCellRenderer(new IconTextCellRemderer());
            NHLGameTable.getColumnModel().getColumn(1).setCellRenderer(new IconTextCellRemderer());
            NHLGameTable.getColumnModel().getColumn(2).setCellRenderer(new CenterTextCellRenderer());
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NHLDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NHLPrevDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NHLNextDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel1))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(NHLNextDayBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NHLPrevDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NHLDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE))
        );

        NHLDateTF.getDateEditor().addPropertyChangeListener(
            "date", new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent e) {
                    z++;
                    if (z == 2) //game liat populates twice on start without this
                    return;
                    NHLSelectedFavGm = false;
                    NHLDate = Time.formatDateSched( ((JTextField)NHLDateTF.getDateEditor().getUiComponent()).getText() );

                    SwingWorker<Void, Void> gg = getGames(0, NHLGameTable, "NHL");
                    gg.execute();
                }
            });

            jTabbedPane1.addTab("NHL", jPanel5);

            MLBGameTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null}
                },
                new String [] {
                    "Away", "Home", "Time"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Object.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            MLBGameTable.setRowHeight(26);
            MLBGameTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            MLBGameTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    MLBGameTableMouseClicked(evt);
                }
            });
            MLBGameTable.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    MLBGameTableKeyReleased(evt);
                }
            });
            jScrollPane2.setViewportView(MLBGameTable);
            if (MLBGameTable.getColumnModel().getColumnCount() > 0) {
                MLBGameTable.getColumnModel().getColumn(0).setCellRenderer(new IconTextCellRemderer());
                MLBGameTable.getColumnModel().getColumn(1).setCellRenderer(new IconTextCellRemderer());
                MLBGameTable.getColumnModel().getColumn(2).setCellRenderer(new CenterTextCellRenderer());
            }

            javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
            jPanel7.setLayout(jPanel7Layout);
            jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
            );

            jLabel2.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
            jLabel2.setText("Date:");

            MLBDateTF.setDateFormatString("MMM d, yyyy");
            MLBDateTF.setInheritsPopupMenu(true);

            MLBPrevDayBtn.setText("<");
            MLBPrevDayBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    MLBPrevDayBtnActionPerformed(evt);
                }
            });

            MLBNextDayBtn.setText(">");
            MLBNextDayBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    MLBNextDayBtnActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
            jPanel6.setLayout(jPanel6Layout);
            jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(177, 177, 177))
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(MLBDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(MLBPrevDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(MLBNextDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            );
            jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(3, 3, 3)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MLBPrevDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MLBNextDayBtn))
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(MLBDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            MLBDateTF.getDateEditor().addPropertyChangeListener(
                "date", new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent e) {
                        z++;
                        //  if (z == 2) //game liat populates twice on start without this
                        // return;
                        MLBSelectedFavGm = false;
                        MLBDate = Time.formatDateSched( ((JTextField)MLBDateTF.getDateEditor().getUiComponent()).getText() );

                        SwingWorker<Void, Void> gg = getGames(0, MLBGameTable, "MLB");
                        gg.execute();
                    }
                });

                jTabbedPane1.addTab("MLB", jPanel6);

                NHLPlayBtn.setMnemonic(KeyEvent.VK_P);
                NHLPlayBtn.setText("Play");
                NHLPlayBtn.setEnabled(false);
                NHLPlayBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        NHLPlayBtnActionPerformed(evt);
                    }
                });

                NHLSaveStreamCB.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
                NHLSaveStreamCB.setMnemonic(KeyEvent.VK_V);
                NHLSaveStreamCB.setText("Save stream");
                NHLSaveStreamCB.setEnabled(false);
                NHLSaveStreamCB.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        NHLSaveStreamCBActionPerformed(evt);
                    }
                });

                jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("CDN"));

                NHLCDNCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Akamai", "Level 3" }));
                NHLCDNCB.addItemListener(new java.awt.event.ItemListener() {
                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                        NHLCDNCBItemStateChanged(evt);
                    }
                });

                javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
                jPanel4.setLayout(jPanel4Layout);
                jPanel4Layout.setHorizontalGroup(
                    jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NHLCDNCB, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                );
                jPanel4Layout.setVerticalGroup(
                    jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(NHLCDNCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 12, Short.MAX_VALUE))
                );

                jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Quality"));

                NHLQualityCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "360p", "540p", "720p", "720p60" }));
                NHLQualityCB.addItemListener(new java.awt.event.ItemListener() {
                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                        NHLQualityCBItemStateChanged(evt);
                    }
                });

                javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                jPanel3.setLayout(jPanel3Layout);
                jPanel3Layout.setHorizontalGroup(
                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NHLQualityCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                );
                jPanel3Layout.setVerticalGroup(
                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NHLQualityCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                );

                jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Feed"));

                NHLFeedCB.addItemListener(new java.awt.event.ItemListener() {
                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                        NHLFeedCBItemStateChanged(evt);
                    }
                });

                javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(NHLFeedCB, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                );
                jPanel2Layout.setVerticalGroup(
                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NHLFeedCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                );

                NHLRefreshBtn.setText("Refresh");
                NHLRefreshBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        NHLRefreshBtnActionPerformed(evt);
                    }
                });

                jMenu1.setMnemonic(KeyEvent.VK_F);
                jMenu1.setText("File");

                changePasswordMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
                changePasswordMI.setText("Change Password");
                changePasswordMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        changePasswordMIActionPerformed(evt);
                    }
                });
                jMenu1.add(changePasswordMI);

                exitMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
                exitMI.setText("Exit");
                exitMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        exitMIActionPerformed(evt);
                    }
                });
                jMenu1.add(exitMI);

                jMenuBar1.add(jMenu1);

                jMenu2.setMnemonic(KeyEvent.VK_E);
                jMenu2.setText("Edit");

                preferencesMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
                preferencesMI.setText("Preferences");
                preferencesMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        preferencesMIActionPerformed(evt);
                    }
                });
                jMenu2.add(preferencesMI);

                jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
                jMenuItem1.setText("Change IP");
                jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem1ActionPerformed(evt);
                    }
                });
                jMenu2.add(jMenuItem1);

                jMenuItem2.setText("Clear Hosts File");
                jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem2ActionPerformed(evt);
                    }
                });
                jMenu2.add(jMenuItem2);

                jMenuBar1.add(jMenu2);

                jMenu3.setMnemonic(KeyEvent.VK_H);
                jMenu3.setText("Help");

                guidesMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
                guidesMI.setText("Guides");
                guidesMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        guidesMIActionPerformed(evt);
                    }
                });
                jMenu3.add(guidesMI);

                AboutMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
                AboutMI.setText("About");
                AboutMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        AboutMIActionPerformed(evt);
                    }
                });
                jMenu3.add(AboutMI);

                updateMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
                updateMI.setText("Update Available");
                updateMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        updateMIActionPerformed(evt);
                    }
                });
                jMenu3.add(updateMI);

                jMenuBar1.add(jMenu3);

                jMenu4.setMnemonic(KeyEvent.VK_D);
                jMenu4.setText("Donate");

                ppMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
                ppMI.setText("PayPal");
                ppMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ppMIActionPerformed(evt);
                    }
                });
                jMenu4.add(ppMI);

                bitcoinMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
                bitcoinMI.setText("Bitcoin");
                bitcoinMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        bitcoinMIActionPerformed(evt);
                    }
                });
                jMenu4.add(bitcoinMI);

                jMenuBar1.add(jMenu4);

                setJMenuBar(jMenuBar1);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NHLRefreshBtn)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(NHLPlayBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(NHLSaveStreamCB))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(maximizeConsoleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(30, Short.MAX_VALUE))
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(NHLRefreshBtn)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NHLPlayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NHLSaveStreamCB))))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maximizeConsoleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents

    private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMIActionPerformed

    private void NHLGameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NHLGameTableMouseClicked
        if (NHLGameTable.getModel().getValueAt(0, 0).equals("None")) {
            return;
        }

        NHLSelectedGame = NHLGameTable.getSelectedRow();
        getAvailableStreams(NHLSelectedGame, "NHL");
    }//GEN-LAST:event_NHLGameTableMouseClicked

    private void NHLGameTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NHLGameTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || KeyEvent.VK_DOWN == evt.getKeyCode()) {
            NHLGameTableMouseClicked(null);
        }
    }//GEN-LAST:event_NHLGameTableKeyReleased

    private void NHLSaveStreamCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NHLSaveStreamCBActionPerformed
        if (!NHLPlayBtn.getText().equals("Stop Recording")) {
            if (NHLSaveStreamCB.isSelected()) {
                NHLPlayBtn.setText("Record");
            } else {
                NHLPlayBtn.setText("Play");
            }
        }

        streamlink.record = NHLSaveStreamCB.isSelected();
    }//GEN-LAST:event_NHLSaveStreamCBActionPerformed

    private void NHLPlayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NHLPlayBtnActionPerformed
        if (!NHLPlayBtn.isEnabled()) {
            return;
        }

        checkHosts(league);

        if (league.equals("NHL")) {
            if (!NHLHostsEdited) {
                MessageBox.show("You are not completely set up! Your hosts file needs to be edited for " + league + ".", "Hosts file not edited", 2);
                return;
            }
        } else if (!MLBHostsEdited) {
            MessageBox.show("You are not completely set up! Your hosts file needs to be edited for " + league + ".", "Hosts file not edited", 2);
            return;
        }

        if (streamlink.getLocation() == null || streamlink.getLocation().equals("")) {
            getSLLoc();

            if (streamlink.getLocation() == null || streamlink.getLocation().equals("")) {
                MessageBox.show("Streamlink was not set! It is required to stream games.", "Streamlink not set", 2);
                return;
            }
        }

        NHLGWI.setUrl(NHLDate, getMediaID(league), league);

        if (NHLPlayBtn.getText().equals("Stop Recording")) {
            if (league.equals("NHL")) {
                NHLStreamlinkSwitch = -1;
            } else {
                MLBStreamlinkSwitch = -1;
            }

            if (NHLSaveStreamCB.isSelected()) {
                NHLPlayBtn.setText("Record");
            } else {
                NHLPlayBtn.setText("Play");
            }
            return;
        }

        if (NHLSaveStreamCB.isSelected()) {
            if (league.equals("NHL")) {
                NHLStreamlinkSwitch = 1;
            } else {
                MLBStreamlinkSwitch = 1;
            }
            NHLPlayBtn.setText("Stop Recording");
        } else if (league.equals("NHL")) {
            NHLStreamlinkSwitch = 0;
        } else {
            MLBStreamlinkSwitch = 0;
        }
        SwingWorker<Void, Void> pl = playGame(league);
        pl.execute();
    }//GEN-LAST:event_NHLPlayBtnActionPerformed

    private void preferencesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMIActionPerformed
        int refresh = Props.getRefreshRate();

        Options op = new Options(this, true);
        op.setLocationRelativeTo(this);
        op.setVisible(true);

        if (!NHLGameTable.getModel().getValueAt(0, 0).equals("None")) {
            int idx = NHLSelectedGame;
            setRow(idx, "NHL");
            setFeed(idx, 'a', "NHL");

            if (Props.getRefreshRate() != refresh) {
                refresh = Props.getRefreshRate();

                if (refresh == 0 && NHLTimer != null) {
                    NHLTimer.cancel();
                    NHLTimer = null;
                } else if (refresh > 0 && NHLTimer != null) {
                    NHLTimer.cancel();
                    NHLTimer.scheduleAtFixedRate(new Refresh("NHL"), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                } else if (refresh > 0 && NHLTimer == null) {
                    NHLTimer = new Timer();
                    NHLTimer.scheduleAtFixedRate(new Refresh("NHL"), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                }
            }
        }

        if (!MLBGameTable.getModel().getValueAt(0, 0).equals("None")) {
            int idx = MLBSelectedGame;
            setRow(idx, "MLB");
            setFeed(idx, 'a', "MLB");

            if (Props.getRefreshRate() != refresh) {
                refresh = Props.getRefreshRate();

                if (refresh == 0 && NHLTimer != null) {
                    NHLTimer.cancel();
                    NHLTimer = null;
                } else if (refresh > 0 && NHLTimer != null) {
                    NHLTimer.cancel();
                    NHLTimer.scheduleAtFixedRate(new Refresh("MLB"), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                } else if (refresh > 0 && NHLTimer == null) {
                    NHLTimer = new Timer();
                    NHLTimer.scheduleAtFixedRate(new Refresh("MLB"), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                }
            }
        }
    }//GEN-LAST:event_preferencesMIActionPerformed

    private void changePasswordMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordMIActionPerformed
        GetPasswordGUI gp = new GetPasswordGUI(this, true);
        gp.setLocationRelativeTo(this);
        gp.setVisible(true);
    }//GEN-LAST:event_changePasswordMIActionPerformed

    private void AboutMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMIActionPerformed
        AboutGUI a = new AboutGUI(this, true);
        a.setLocationRelativeTo(this);
        a.setVisible(true);
    }//GEN-LAST:event_AboutMIActionPerformed

    private void guidesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guidesMIActionPerformed
        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/index");
    }//GEN-LAST:event_guidesMIActionPerformed

    private void ppMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ppMIActionPerformed
        OpenURL.open("https://www.donation-tracker.de/donate/stevensnjd4");
    }//GEN-LAST:event_ppMIActionPerformed

    private void bitcoinMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bitcoinMIActionPerformed
        OpenURL.open("https://blockchain.info/address/1QHhn9wFZAPtuGaZQpYwHEUu5xrboN3ayi");
    }//GEN-LAST:event_bitcoinMIActionPerformed

    private void updateMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMIActionPerformed
        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/downloads");
    }//GEN-LAST:event_updateMIActionPerformed

    private void NHLRefreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NHLRefreshBtnActionPerformed
        SwingWorker<Void, Void> gg;
        if (league.equals("NHL")) {
            gg = getGames(NHLSelectedGame, NHLGameTable, "NHL");
        } else {
            gg = getGames(MLBSelectedGame, MLBGameTable, "MLB");
        }
        gg.execute();
    }//GEN-LAST:event_NHLRefreshBtnActionPerformed

    private void maximizeConsoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maximizeConsoleButtonActionPerformed
        FullConsole fc = new FullConsole(this, true, consoleTA);
        fc.setLocationRelativeTo(this);
        fc.setVisible(true);
    }//GEN-LAST:event_maximizeConsoleButtonActionPerformed

    private void NHLPrevDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NHLPrevDayBtnActionPerformed
        NHLSelectedFavGm = false;
        NHLDate = Time.getPrevDay(NHLDate);
        NHLDateTF.setDate(Time.getDate(NHLDate, "yyyy-MM-dd"));
    }//GEN-LAST:event_NHLPrevDayBtnActionPerformed

    private void NHLNextDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NHLNextDayBtnActionPerformed
        NHLSelectedFavGm = false;
        NHLDate = Time.getNextDay(NHLDate);
        NHLDateTF.setDate(Time.getDate(NHLDate, "yyyy-MM-dd"));
    }//GEN-LAST:event_NHLNextDayBtnActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        CustomIP c = new CustomIP(this, true);
        c.setLocationRelativeTo(this);
        c.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        EditHosts eh = new EditHosts();

        if (eh.clearHosts()) {
            MessageBox.show("Hosts file cleared from LazyMan edits.", "Hosts File Cleared", 0);
        } else {
            MessageBox.show("Hosts file not cleared from LazyMan edits. Please check the console area.", "Hosts Not File Cleared", 2);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void MLBPrevDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MLBPrevDayBtnActionPerformed
        MLBSelectedFavGm = false;
        MLBDate = Time.getPrevDay(MLBDate);
        MLBDateTF.setDate(Time.getDate(MLBDate, "yyyy-MM-dd"));
        NHLGWI.setDate(MLBDate);
    }//GEN-LAST:event_MLBPrevDayBtnActionPerformed

    private void MLBNextDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MLBNextDayBtnActionPerformed
        MLBSelectedFavGm = false;
        MLBDate = Time.getNextDay(MLBDate);
        MLBDateTF.setDate(Time.getDate(MLBDate, "yyyy-MM-dd"));
        NHLGWI.setDate(MLBDate);
    }//GEN-LAST:event_MLBNextDayBtnActionPerformed

    private void MLBGameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MLBGameTableMouseClicked
        if (MLBGameTable.getModel().getValueAt(0, 0).equals("None")) {
            return;
        }

        MLBSelectedGame = MLBGameTable.getSelectedRow();
        getAvailableStreams(MLBSelectedGame, "MLB");

        if (evt != null && evt.getClickCount() == 2) {
            NHLPlayBtnActionPerformed(null);
        }
    }//GEN-LAST:event_MLBGameTableMouseClicked

    private void MLBGameTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MLBGameTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || KeyEvent.VK_DOWN == evt.getKeyCode()) {
            MLBGameTableMouseClicked(null);
        }
    }//GEN-LAST:event_MLBGameTableKeyReleased

    private void NHLQualityCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_NHLQualityCBItemStateChanged
        if (nhl == null && mlb == null) {
            return;
        }
        String quality = (String) NHLQualityCB.getSelectedItem();

        if (quality.equals("720p60")) {
            quality = "best";
        }

        NHLGWI.setQuality(quality);
        Props.setBitrate(quality);
    }//GEN-LAST:event_NHLQualityCBItemStateChanged

    private void NHLCDNCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_NHLCDNCBItemStateChanged
        if (nhl == null && mlb == null) {
            return;
        }
        String cdn = (String) NHLCDNCB.getSelectedItem();

        if (cdn.equals("Akamai")) {
            NHLGWI.setCdn("akc");
        } else {
            NHLGWI.setCdn("l3c");
        }

        Props.setCDN(cdn);
    }//GEN-LAST:event_NHLCDNCBItemStateChanged

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if (nhl == null && mlb == null) {
            return;
        }

        league = jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex());

        if (league.contains("NHL")) {
            if (nhl != null) {
                setRow(NHLSelectedGame, league);
            } else {
                NHLFeedCB.removeAllItems();
            }
        } else if (mlb != null) {
            setRow(MLBSelectedGame, league);
        } else {
            NHLFeedCB.removeAllItems();
        }
        enablePlayBtn(league);
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void NHLFeedCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_NHLFeedCBItemStateChanged
        if (NHLFeedCB.getItemCount() >= 1) {
            enablePlayBtn(league);
        }
    }//GEN-LAST:event_NHLFeedCBItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMI;
    private com.toedter.calendar.JDateChooser MLBDateTF;
    private javax.swing.JTable MLBGameTable;
    private javax.swing.JButton MLBNextDayBtn;
    private javax.swing.JButton MLBPrevDayBtn;
    private javax.swing.JComboBox<String> NHLCDNCB;
    private com.toedter.calendar.JDateChooser NHLDateTF;
    private javax.swing.JComboBox<String> NHLFeedCB;
    private javax.swing.JTable NHLGameTable;
    private javax.swing.JButton NHLNextDayBtn;
    private javax.swing.JButton NHLPlayBtn;
    private javax.swing.JButton NHLPrevDayBtn;
    private javax.swing.JComboBox<String> NHLQualityCB;
    private javax.swing.JButton NHLRefreshBtn;
    private javax.swing.JCheckBox NHLSaveStreamCB;
    private javax.swing.JMenuItem bitcoinMI;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JMenuItem changePasswordMI;
    private javax.swing.JPopupMenu consolePM;
    private javax.swing.JTextPane consoleTA;
    private javax.swing.JMenuItem exitMI;
    private javax.swing.JMenuItem guidesMI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton maximizeConsoleButton;
    private javax.swing.JMenuItem ppMI;
    private javax.swing.JMenuItem preferencesMI;
    private javax.swing.JMenuItem updateMI;
    // End of variables declaration//GEN-END:variables

    class newDay extends Thread {

        @Override
        public void run() {
            while (true) {
                try {
                    Thread.sleep(Time.nextDay());
                    NHLDate = Time.getPSTDate("yyyy-MM-dd");
                    NHLDateTF.setDate(Time.getPSTDate1("MMM dd, yyyy"));
                    NHLGWI.setDate(NHLDate);

                    MLBDate = Time.getPSTDate("yyyy-MM-dd");
                    MLBDateTF.setDate(Time.getPSTDate1("MMM dd, yyyy"));
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        }

    }

    private SwingWorker<Void, Void> getGames(final int row, JTable table, String lg) {

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    if (lg.equals("NHL")) {
                        if (Time.isToday(NHLDate) && Props.getRefreshRate() > 0 && NHLTimer == null) {
                            NHLTimer = new Timer();
                            NHLTimer.scheduleAtFixedRate(new Refresh(lg), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                        } else if (NHLTimer != null && !Time.isToday(NHLDate)) {
                            NHLTimer.cancel();
                            NHLTimer = null;
                        }
                    } else if (Time.isToday(MLBDate) && Props.getRefreshRate() > 0 && MLBTimer == null) {
                        MLBTimer = new Timer();
                        MLBTimer.scheduleAtFixedRate(new Refresh(lg), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                    } else if (MLBTimer != null && !Time.isToday(MLBDate)) {
                        MLBTimer.cancel();
                        MLBTimer = null;
                    }
                    String time;

                    DefaultTableModel model = (DefaultTableModel) table.getModel();
                    model.setRowCount(0);

                    if (lg.equals("NHL")) {
                        nhl = GetNHLInfo.getGames(NHLDate);

                        if (nhl != null && nhl.length > 0) {
                            for (Game g1 : nhl) {
                                if (g1.getTimeRemaining().equalsIgnoreCase("n/a")) {
                                    time = Time.toLocalTZ(NHLDate + " " + g1.getTime(), "UTC", "yyyy-MM-dd H:mm");
                                } else {
                                    time = g1.getTimeRemaining();
                                }
                                model.addRow(new Object[]{g1.getAwayTeam() + "-" + g1.getAwayTeamFull(),
                                    g1.getHomeTeam() + "-" + g1.getHomeTeamFull(),
                                    time});
                            }
                            table.setModel(model);

                            if (row != -1 && league.equals("NHL")) {
                                NHLSelectedGame = setRow(row, lg);
                            }
                            if (league.equals("NHL")) {
                                enablePlayBtn("NHL");
                            }
                            NHLGWI.setDate(NHLDate);
                            table.requestFocus();
                        } else if (nhl == null) {
                            model.setRowCount(0);
                            model.addRow(new Object[]{"None", "None", "None"});
                            if (NHLTimer != null) {
                                NHLTimer.cancel();
                                NHLTimer = null;
                            }
                            if (lg.equals("NHL")) {
                                NHLPlayBtn.setEnabled(false);
                            }
                        }
                    } else {
                        mlb = GetMLBInfo.getGames(MLBDate);
                        if (mlb != null && mlb.length > 0) {
                            for (Game g1 : mlb) {
                                if (g1.getTimeRemaining().equalsIgnoreCase("n/a")) {
                                    time = Time.toLocalTZ(MLBDate + " " + g1.getTime(), "UTC", "yyyy-MM-dd H:mm");
                                } else {
                                    time = g1.getTimeRemaining();
                                }
                                model.addRow(new Object[]{g1.getAwayTeam() + "-" + g1.getAwayTeamFull(),
                                    g1.getHomeTeam() + "-" + g1.getHomeTeamFull(),
                                    time});
                            }
                            table.setModel(model);

                            if (row != -1 && league.equals("MLB")) {
                                MLBSelectedGame = setRow(row, lg);
                            }
                            if (league.equals("MLB")) {
                                enablePlayBtn("MLB");
                            }
                            NHLGWI.setDate(MLBDate);
                            table.requestFocus();
                        } else if (mlb == null) {
                            model.setRowCount(0);
                            model.addRow(new Object[]{"None", "None", "None"});
                            if (MLBTimer != null) {
                                MLBTimer.cancel();
                                MLBTimer = null;
                            }
                            NHLPlayBtn.setEnabled(false);
                        }
                    }

                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

                return null;

            }

        };
        return worker;
    }

    private String getFavTeamIndex(String team, String league) {
        if (league.equals("NHL")) {
            for (int i = 0; i < nhl.length; i++) {
                if ((nhl[i].getAwayTeam()).equals(team)) {
                    if (nhl[i].getGameState().contains("Pre") || nhl[i].getGameState().contains("In Progress") || nhl[i].getGameState().contains("Final")) {
                        return i + "a";
                    }
                    return "-1n";
                }
                if (nhl[i].getHomeTeam().equals(team)) {
                    if (nhl[i].getGameState().contains("Pre") || nhl[i].getGameState().contains("In Progress") || nhl[i].getGameState().contains("Final")) {
                        return i + "h";
                    }
                    return "-1n";
                }
            }
            return "-1n";
        } else {
            for (int i = 0; i < mlb.length; i++) {
                if ((mlb[i].getAwayTeam()).equals(team)) {
                    if (mlb[i].getGameState().contains("War") || mlb[i].getGameState().contains("In Progress") || mlb[i].getGameState().contains("Final")) {
                        return i + "a";
                    }
                    return "-1n";
                }
                if (mlb[i].getHomeTeam().equals(team)) {
                    if (mlb[i].getGameState().contains("War") || mlb[i].getGameState().contains("In Progress") || mlb[i].getGameState().contains("Final")) {
                        return i + "h";
                    }
                    return "-1n";
                }
            }
            return "-1n";
        }
    }

    private int setRow(int row, String league) {
        if (league.equals("NHL")) {
            if ((!Props.getNHLTeam().equals("") || !Props.getNHLTeam().equals("None")) && !NHLSelectedFavGm) {
                String index = getFavTeamIndex(Props.getNHLTeam(), league);
                int idx = Integer.parseInt(index.substring(0, index.length() - 1));
                char homeOrAway = index.charAt(index.length() - 1);

                if (idx != -1) {
                    getAvailableStreams(idx, league);
                    setFeed(idx, homeOrAway, league);
                    NHLGameTable.setRowSelectionInterval(idx, idx);
                    NHLSelectedFavGm = true;
                    return idx;
                }
            }
            getAvailableStreams(row, league);
            setFeed(row, 'a', league);

            NHLGameTable.setRowSelectionInterval(row, row);
        } else {
            if ((!Props.getMLBTeam().equals("") || !Props.getMLBTeam().equals("None")) && !MLBSelectedFavGm) {
                String index = getFavTeamIndex(Props.getMLBTeam(), league);
                int idx = Integer.parseInt(index.substring(0, index.length() - 1));
                char homeOrAway = index.charAt(index.length() - 1);

                if (idx != -1) {
                    getAvailableStreams(idx, league);
                    setFeed(idx, homeOrAway, league);
                    MLBGameTable.setRowSelectionInterval(idx, idx);
                    MLBSelectedFavGm = true;
                    return idx;
                }
            }
            getAvailableStreams(row, league);
            setFeed(row, 'a', league);

            MLBGameTable.setRowSelectionInterval(row, row);
        }

        return row;
    }

    private void setFeed(int idx, char homeOrAway, String league) {
        if (league.equals("NHL")) {
            if (NHLSelectedFavGm) {
                return;
            }
            switch (homeOrAway) {
                case 'a':
                    if (!"0".equals(Props.getPreferFrench()) && nhl[idx].contains("FRENCH")) {
                        NHLFeedCB.setSelectedIndex(nhl[idx].getFeedIndex("FRENCH"));
                    } else if (nhl[idx].contains("AWAY")) {
                        NHLFeedCB.setSelectedIndex(1);
                    } else {
                        NHLFeedCB.setSelectedIndex(0);
                    }
                    break;
                case 'h':
                    if (!"0".equals(Props.getPreferFrench()) && nhl[idx].contains("FRENCH")) {
                        NHLFeedCB.setSelectedIndex(nhl[idx].getFeedIndex("FRENCH"));
                    } else {
                        NHLFeedCB.setSelectedIndex(0);
                    }
            }
        } else {
            if (MLBSelectedFavGm) {
                return;
            }
            switch (homeOrAway) {
                case 'a':
                    if (mlb[idx].contains("AWAY")) {
                        NHLFeedCB.setSelectedIndex(1);
                    } else {
                        NHLFeedCB.setSelectedIndex(0);
                    }
                    break;
                case 'h':
                    NHLFeedCB.setSelectedIndex(0);
            }
        }
    }

    private void getAvailableStreams(int row, String league) {
        if (league.equals("NHL")) {
            NHLFeedCB.removeAllItems();
            if (nhl[row].getNumOfFeeds() > 0) {
                for (int i = 0; i < nhl[row].getNumOfFeeds(); i++) {
                    if (!nhl[row].getFeedTV(i).isEmpty()) {
                        NHLFeedCB.addItem(nhl[row].getFeedName(i) + " (" + nhl[row].getFeedTV(i) + ")");
                    } else {
                        NHLFeedCB.addItem(nhl[row].getFeedName(i));
                    }
                }
            }
        } else {
            NHLFeedCB.removeAllItems();

            for (int i = 0; i < mlb[row].getNumOfFeeds(); i++) {
                NHLFeedCB.addItem(mlb[row].getFeedName(i) + " (" + mlb[row].getFeedTV(i) + ")");
            }
        }
    }

    private boolean checkID(String id, String league) {
        BufferedReader br = null;
        boolean idExists = false;
        try {
            String base = "";
            try {
                base = Paths.get(Props.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toFile().getParent();
            } catch (URISyntaxException ex) {
                ex.printStackTrace();
            }
            File ids;
            if (league.equals("NHL")) {
                ids = new File(base + System.getProperty("file.separator") + "ids.txt");
            } else {
                ids = new File(base + System.getProperty("file.separator") + "mlbids.txt");
            }
            if (!ids.exists()) {
                fillIDs(ids, league);
            }

            br = new BufferedReader(new FileReader(ids));
            String line;
            while ((line = br.readLine()) != null) {
                if (line.equals(id)) {
                    idExists = true;
                    break;
                }
            }
            if (!idExists) {
                fillIDs(ids, league);

                br = new BufferedReader(new FileReader(ids));

                while ((line = br.readLine()) != null) {
                    if (line.equals(id)) {
                        idExists = true;
                        break;
                    }
                }
            }

        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
        return idExists;
    }

    private void fillIDs(File ids, String league) {
        if (league.equals("NHL")) {
            if (!NHLPlaybackIDs.isEmpty()) {
                NHLPlaybackIDs.clear();
            }
        } else if (!MLBPlaybackIDs.isEmpty()) {
            MLBPlaybackIDs.clear();
        }

        if (league.equals("NHL")) {
            try {
                Collections.addAll(NHLPlaybackIDs, Web.getContent("http://mf.svc.nhl.com/static/ids.txt").replace("akc", "").replace("l3c", "").split("\n"));
            } catch (UnknownHostException uhe) {
                MessageBox.show("The server may be down.", "Error", 2);
            }
            try (FileWriter writer = new FileWriter(ids, false)) {
                for (String str : NHLPlaybackIDs) {
                    writer.write(str + "\r\n");
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                NHLPlaybackIDs.clear();
            }
        } else {
            try {
                Collections.addAll(MLBPlaybackIDs, Web.getContent("http://mf.svc.nhl.com/static/mlbids.txt").replace("akc", "").replace("l3c", "").split("\n"));
            } catch (UnknownHostException uhe) {
                MessageBox.show("The server may be down.", "Error", 2);
            }
            try (FileWriter writer = new FileWriter(ids, false)) {
                for (String str : MLBPlaybackIDs) {
                    writer.write(str + "\r\n");
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                MLBPlaybackIDs.clear();
            }
        }
    }

    private void enablePlayBtn(String league) {
        if (league.equals("NHL")) {
            if (nhl == null) {
                NHLPlayBtn.setEnabled(false);
                NHLSaveStreamCB.setEnabled(false);

                if (NHLSaveStreamCB.isSelected()) {
                    NHLSaveStreamCB.setSelected(false);
                    NHLPlayBtn.setText("Play");
                    streamlink.record = false;
                }
                return;
            }
            if (NHLStreamlinkSwitch < 1) {
                int idx = NHLSelectedGame;

                String d = Time.toLocalTZ(NHLDate, "America/Los_Angeles", "yyyy-MM-dd", "yyyy-MM-dd");

                boolean e = Time.isXMinBeforeGame(d + " " + Time.toLocalTZ(nhl[idx].getTime(), "UTC", "H:mm"), 50) && checkID(nhl[idx].getFeedID(NHLFeedCB.getSelectedIndex()), league);

                NHLPlayBtn.setEnabled(e);

                if (!e && NHLSaveStreamCB.isSelected()) {
                    NHLSaveStreamCB.setSelected(false);
                    NHLPlayBtn.setText("Play");
                    streamlink.record = false;
                }
                NHLSaveStreamCB.setEnabled(e);
            } else {
                NHLPlayBtn.setText("Stop Recording");
                NHLPlayBtn.setEnabled(true);
                NHLSaveStreamCB.setEnabled(true);
                NHLSaveStreamCB.setSelected(true);
            }

            if (!NHLPlaybackIDs.isEmpty()) {
                NHLPlaybackIDs.clear();
            }
        } else {
            if (mlb == null) {
                NHLPlayBtn.setEnabled(false);
                NHLSaveStreamCB.setEnabled(false);

                if (NHLSaveStreamCB.isSelected()) {
                    NHLSaveStreamCB.setSelected(false);
                    NHLPlayBtn.setText("Play");
                    streamlink.record = false;
                }
                return;
            }
            if (MLBStreamlinkSwitch < 1) {
                int idx = MLBSelectedGame;
                String d = Time.toLocalTZ(MLBDate, "America/Los_Angeles", "yyyy-MM-dd", "yyyy-MM-dd");

                boolean e = Time.isXMinBeforeGame(d + " " + Time.toLocalTZ(mlb[idx].getTime(), "UTC", "H:mm"), 50) && checkID(mlb[idx].getFeedID(NHLFeedCB.getSelectedIndex()), league);

                NHLPlayBtn.setEnabled(e);

                if (!e && NHLSaveStreamCB.isSelected()) {
                    NHLSaveStreamCB.setSelected(false);
                    NHLPlayBtn.setText("Play");
                    streamlink.record = false;
                }
                NHLSaveStreamCB.setEnabled(e);
            } else {
                NHLPlayBtn.setText("Stop Recording");
                NHLPlayBtn.setEnabled(true);
                NHLSaveStreamCB.setEnabled(true);
                NHLSaveStreamCB.setSelected(true);
            }

            if (!MLBPlaybackIDs.isEmpty()) {
                MLBPlaybackIDs.clear();
            }
        }
    }

    private SwingWorker<Void, Void> playGame(String league) {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                try {
                    if (!Props.getVlcloc().equals("")) {
                        Process l;
                        int idx = NHLSelectedGame;
                        if (league.equals("NHL")) {
                            l = streamlink.run(nhl[idx], NHLGWI);
                        } else {
                            l = streamlink.run(mlb[idx], NHLGWI);
                        }
                        if (l != null) {
                            SwingWorker<Void, Void> go = getSLOutput(l);
                            go.execute();

                            System.out.print("\n-----\n");
                            System.out.println("Streamlink starting...\n");

                            while (l.isAlive()) {
                                Thread.sleep(700);
                                if (league.equals("NHL")) {
                                    if (NHLStreamlinkSwitch == -1) {
                                        l.destroy();
                                    }
                                } else if (MLBStreamlinkSwitch == -1) {
                                    l.destroy();
                                }
                            }
                            l.waitFor();
                            System.out.println("Streamlink done");
                            int li = consoleTA.getText().lastIndexOf("-----");
                            if (!consoleTA.getText().substring(li, consoleTA.getText().length()).contains("Opening")) {
                                MessageBox.show("Stream unavailable. Please report the game you are trying to play.", "Error", 2);
                            }
                        } else if (league.equals("NHL") && NHLPlayBtn.getText().equals("Stop Recording")) {
                            NHLStreamlinkSwitch = -1;

                            if (NHLSaveStreamCB.isSelected()) {
                                NHLPlayBtn.setText("Record");
                            } else {
                                NHLPlayBtn.setText("Play");
                            }
                        } else if (league.equals("MLB") && NHLPlayBtn.getText().equals("Stop Recording")) {
                            MLBStreamlinkSwitch = -1;

                            if (NHLSaveStreamCB.isSelected()) {
                                NHLPlayBtn.setText("Record");
                            } else {
                                NHLPlayBtn.setText("Play");
                            }
                        }
                    } else {
                        String message = "Please set the location to your media player executable.";
                        MessageBox.show(message, "Error", 2);
                        if (league.equals("NHL")) {
                            NHLPlayBtn.setEnabled(true);
                        } else {
                            NHLPlayBtn.setEnabled(true);
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return null;

            }

        };
        return worker;
    }

    private void getSLLoc() {
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            Path currentRelativePath = Paths.get("");
            String ls = currentRelativePath.toAbsolutePath().toString() + "\\streamlink\\streamlink.exe";
            java.io.File f = new java.io.File(ls);
            if (f.exists()) {
                streamlink.setLocation(ls);
            } else {
                MessageBox.show("Could not find Streamlink. Please extract the folder comtaining Streamlink to the same folder as LazyMan.", "Error", 2);
            }
        } else {
            String ls;
            if (System.getProperty("os.name").toLowerCase().contains("mac")) {
                ls = "/usr/local/bin/streamlink";
            } else {
                ls = "streamlink";
            }
            if (cmdExists(ls)) {
                streamlink.setLocation(ls);
            } else {
                MessageBox.show("Could not find Streamlink. Please follow the guide on how to install it.", "Error", 2);
            }
        }
    }

    private boolean cmdExists(String cmd) {
        String output;
        try {
            output = ProcessReader.getProcessOutput(new ProcessBuilder("/bin/sh", "-c", cmd).redirectErrorStream(true).start()).toLowerCase();
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }

        return !(output.equals("")
                || output.contains("not found")
                || output.contains("no file")
                || output.contains("no such"));
    }

    private void setButtons() {
        String bitrate = Props.getBitrate(), cdn = Props.getCDN();

        if (!bitrate.equals("")) {
            if (!bitrate.equals("best")) {
                NHLQualityCB.setSelectedItem(bitrate);
            } else {
                NHLQualityCB.setSelectedItem("720p60");
            }

            NHLGWI.setQuality(bitrate);
        } else {
            NHLGWI.setQuality("720p");
        }

        if (!cdn.equals("")) {
            NHLCDNCB.setSelectedItem(cdn);
            if (cdn.equals("Akamai")) {
                NHLGWI.setCdn("akc");
            } else {
                NHLGWI.setCdn("l3c");
            }
        } else {
            NHLGWI.setCdn("akc");
        }
    }

    private String getMediaID(String league) {
        if (league.equals("NHL")) {
            return nhl[NHLSelectedGame].getFeedID(NHLFeedCB.getSelectedIndex());
        } else {
            return mlb[MLBSelectedGame].getFeedID(NHLFeedCB.getSelectedIndex());
        }
    }

    private void checkUpdate() {
        try (Scanner s = new Scanner(getClass().getResourceAsStream("/VERSION.txt"))) {
            String[] ver = s.nextLine().split("\\.");
            int major = Integer.parseInt(ver[0]), minor = Integer.parseInt(ver[1]), patch = Integer.parseInt(ver[2]), build = Integer.parseInt(ver[3].replace(" BETA", ""));
            int curMajor = 0, curMinor = 0, curPatch = 0, curBuild = 0;
            try {
                String[] curVer = Web.getContent("https://bitbucket.org/ntyler92/lazyman-v2/raw/master/VERSION").split("\\.");
                curMajor = Integer.parseInt(curVer[0]);
                curMinor = Integer.parseInt(curVer[1]);
                curPatch = Integer.parseInt(curVer[2]);
                curBuild = Integer.parseInt(curVer[3]);
            } catch (Exception ex) {
                return;
            }

            if (!ver[3].contains("BETA")) {
                if (curMajor > major || (curMajor == major && curMinor > minor) || (curMajor == major && curMinor >= minor && curPatch > patch) || (curMajor == major && curMinor >= minor && curPatch >= patch && curBuild > build)) {
                    if (MessageBox.ask("New update available!\nWould you like to open the download page?", "New Update!") == MessageBox.yesOption()) {
                        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/downloads");
                        System.exit(0);
                    }
                } else {
                    updateMI.setVisible(false);
                }
            } else {
                String[] curVerB = Web.getContent("https://bitbucket.org/ntyler92/lazyman-v2/raw/master/VERSIONBETA").split("\\.");
                int curMajorB = Integer.parseInt(curVerB[0]), curMinorB = Integer.parseInt(curVerB[1]), curPatchB = Integer.parseInt(curVerB[2]), curBuildB = Integer.parseInt(curVerB[3].replace(" BETA", ""));

                if (curMajor > major || (curMajor == major && curMinor > minor) || (curMajor == major && curMinor >= minor && curPatch > patch) || (curMajor == major && curMinor >= minor && curPatch >= patch && curBuild > build)) {
                    if (MessageBox.ask("New stable update available!\nWould you like to open the download page?", "New Update!") == MessageBox.yesOption()) {
                        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/downloads");
                        System.exit(0);
                    }
                } else if (curMajorB > major || (curMajorB == major && curMinorB > minor) || (curMajorB == major && curMinorB >= minor && curPatchB > patch) || (curMajorB == major && curMinorB >= minor && curPatchB >= patch && curBuildB > build)) {
                    if (MessageBox.ask("New beta update available!\nWould you like to open the download page?", "New Update!") == MessageBox.yesOption()) {
                        OpenURL.open("https://www.reddit.com/r/LazyMan/");
                        System.exit(0);
                    }
                } else {
                    updateMI.setVisible(false);
                }
            }
        } catch (UnknownHostException uhe) {
            MessageBox.show("You are either offline or BitBucket is down to check for updates.", "Error", 2);
        }
    }

    class Refresh extends TimerTask {

        private final String league;

        public Refresh(String league) {
            this.league = league;
        }

        @Override
        public void run() {
            if (league.equals("NHL")) {
                SwingWorker<Void, Void> gg = getGames(-1, NHLGameTable, "NHL");
                gg.execute();
            } else {
                SwingWorker<Void, Void> gg = getGames(-1, NHLGameTable, "MLB");
                gg.execute();
            }
        }
    }

    private SwingWorker<Void, Void> getSLOutput(final Process p) {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                try {
                    ProcessReader.putProcessOutput(p, consoleTA);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return null;

            }

        };
        return worker;
    }

}
